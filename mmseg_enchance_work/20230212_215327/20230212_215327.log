2023/02/12 21:53:27 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.0 (default, Nov  6 2019, 21:49:08) [GCC 7.3.0]
    CUDA available: True
    numpy_random_seed: 0
    GPU 0: NVIDIA GeForce RTX 3070 Laptop GPU
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 11.6, V11.6.124
    GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
    PyTorch: 1.13.0+cu116
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.6
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.0+cu116
    OpenCV: 4.6.0
    MMEngine: 0.5.0

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 0
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/02/12 21:53:28 - mmengine - INFO - Config:
norm_cfg = dict(type='BN', requires_grad=True)
data_preprocessor = dict(
    type='SegDataPreProcessor',
    mean=[123.675, 116.28, 103.53],
    std=[58.395, 57.12, 57.375],
    bgr_to_rgb=True,
    pad_val=0,
    seg_pad_val=255,
    size=(512, 1024))
model = dict(
    type='EncoderDecoder',
    data_preprocessor=dict(
        type='SegDataPreProcessor',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        bgr_to_rgb=True,
        pad_val=0,
        seg_pad_val=255,
        size=(400, 600)),
    pretrained='open-mmlab://resnet18_v1c',
    backbone=dict(
        type='ResNetV1c',
        depth=18,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        dilations=(1, 1, 2, 4),
        strides=(1, 2, 1, 1),
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=False,
        style='pytorch',
        contract_dilation=True),
    decode_head=dict(
        type='FCNHead',
        in_channels=512,
        in_index=3,
        channels=128,
        num_convs=2,
        concat_input=True,
        dropout_ratio=0.1,
        num_classes=24,
        norm_cfg=dict(type='BN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),
    auxiliary_head=dict(
        type='FCNHead',
        in_channels=256,
        in_index=2,
        channels=64,
        num_convs=1,
        concat_input=False,
        dropout_ratio=0.1,
        num_classes=24,
        norm_cfg=dict(type='BN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
dataset_type = 'CustomDataset'
data_root = 'data/aerial/dataset/semantic_drone_dataset'
crop_size = (400, 600)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(
        type='RandomResize',
        scale=(320, 240),
        ratio_range=(0.5, 2.0),
        keep_ratio=True),
    dict(type='RandomCrop', crop_size=(400, 600), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PackSegInputs')
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', scale=(320, 240), keep_ratio=True),
    dict(type='LoadAnnotations'),
    dict(type='PackSegInputs')
]
img_ratios = [0.5, 0.75, 1.0, 1.25, 1.5, 1.75]
tta_pipeline = [
    dict(type='LoadImageFromFile', backend_args=dict(backend='local')),
    dict(
        type='TestTimeAug',
        transforms=[[{
            'type': 'Resize',
            'scale_factor': 0.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 0.75,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.0,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.25,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.75,
            'keep_ratio': True
        }],
                    [{
                        'type': 'RandomFlip',
                        'prob': 0.0,
                        'direction': 'horizontal'
                    }, {
                        'type': 'RandomFlip',
                        'prob': 1.0,
                        'direction': 'horizontal'
                    }], [{
                        'type': 'LoadAnnotations'
                    }], [{
                        'type': 'PackSegInputs'
                    }]])
]
train_dataloader = dict(
    batch_size=4,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(type='InfiniteSampler', shuffle=True),
    dataset=dict(
        type='CustomDataset',
        data_root='data/aerial/dataset/semantic_drone_dataset',
        data_prefix=dict(
            img_path='original_images', seg_map_path='label_images_semantic'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(
                type='RandomResize',
                scale=(320, 240),
                ratio_range=(0.5, 2.0),
                keep_ratio=True),
            dict(type='RandomCrop', crop_size=(400, 600), cat_max_ratio=0.75),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PackSegInputs')
        ],
        ann_file='train.txt'))
val_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='CustomDataset',
        data_root='data/aerial/dataset/semantic_drone_dataset',
        data_prefix=dict(
            img_path='original_images', seg_map_path='label_images_semantic'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(320, 240), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ],
        ann_file='val.txt'))
test_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='CustomDataset',
        data_root='data/aerial/dataset/semantic_drone_dataset',
        data_prefix=dict(
            img_path='original_images', seg_map_path='label_images_semantic'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(320, 240), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ],
        ann_file='val.txt'))
val_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
test_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='SegLocalVisualizer',
    vis_backends=[dict(type='LocalVisBackend')],
    name='visualizer')
log_processor = dict(by_epoch=False)
log_level = 'INFO'
load_from = 'fcn_r18-d8_512x1024_80k_cityscapes_20201225_021327-6c50f8b4.pth'
resume = False
tta_model = dict(type='SegTTAModel')
optimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)
optim_wrapper = dict(
    type='OptimWrapper',
    optimizer=dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005),
    clip_grad=None)
param_scheduler = [
    dict(
        type='PolyLR',
        eta_min=0.0001,
        power=0.9,
        begin=0,
        end=80000,
        by_epoch=False)
]
train_cfg = dict(type='IterBasedTrainLoop', max_iters=800, val_interval=100)
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=100, log_metric_by_epoch=False),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(type='CheckpointHook', by_epoch=False, interval=400),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='SegVisualizationHook'))
work_dir = './work_dirs'
randomness = dict(seed=0)

2023/02/12 21:53:28 - mmengine - WARNING - The "visualizer" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/12 21:53:28 - mmengine - WARNING - The "vis_backend" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/12 21:53:28 - mmengine - WARNING - The "model" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/12 21:53:30 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/02/12 21:53:30 - mmengine - WARNING - The "hook" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/12 21:53:30 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/02/12 21:53:30 - mmengine - WARNING - The "loop" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/12 21:53:30 - mmengine - WARNING - The "dataset" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/12 21:53:30 - mmengine - WARNING - The "transform" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/12 21:53:30 - mmengine - WARNING - The "data sampler" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/12 21:53:30 - mmengine - WARNING - The "optimizer wrapper constructor" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/12 21:53:30 - mmengine - WARNING - The "optimizer" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/12 21:53:30 - mmengine - WARNING - The "optim_wrapper" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/12 21:53:30 - mmengine - WARNING - The "parameter scheduler" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/12 21:53:31 - mmengine - WARNING - The "metric" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/12 21:53:31 - mmengine - WARNING - The "weight initializer" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/12 21:53:31 - mmengine - INFO - load model from: open-mmlab://resnet18_v1c
2023/02/12 21:53:31 - mmengine - INFO - Loads checkpoint by openmmlab backend from path: open-mmlab://resnet18_v1c
2023/02/12 21:53:31 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.stem.0.weight - torch.Size([32, 3, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.stem.1.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.stem.1.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.stem.3.weight - torch.Size([32, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.stem.4.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.stem.4.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.stem.6.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.stem.7.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.stem.7.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer1.1.conv1.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer2.0.conv1.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer2.0.downsample.0.weight - torch.Size([128, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer2.0.downsample.1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer2.0.downsample.1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer2.1.conv1.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer3.0.conv1.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer3.0.downsample.0.weight - torch.Size([256, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer3.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer3.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer3.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer4.0.conv1.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer4.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer4.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer4.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer4.1.conv1.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet18_v1c 

decode_head.conv_seg.weight - torch.Size([24, 128, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.conv_seg.bias - torch.Size([24]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.convs.0.conv.weight - torch.Size([128, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.1.conv.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.conv_cat.conv.weight - torch.Size([128, 640, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

decode_head.conv_cat.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.conv_cat.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.conv_seg.weight - torch.Size([24, 64, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.conv_seg.bias - torch.Size([24]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.convs.0.conv.weight - torch.Size([64, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  
2023/02/12 21:53:31 - mmengine - INFO - Load checkpoint from fcn_r18-d8_512x1024_80k_cityscapes_20201225_021327-6c50f8b4.pth
2023/02/12 21:53:31 - mmengine - INFO - Checkpoints will be saved to /home/sucro/wccsoftware/mmcls2/mmsegmentation/work_dirs.
2023/02/12 21:54:37 - mmengine - INFO - Exp name: fcn_r18-d8_4xb2-80k_cityscapes-512x1024_20230212_215327
2023/02/12 21:54:54 - mmengine - INFO - Iter(train) [100/800]  lr: 9.9890e-03  eta: 0:09:37  time: 0.8204  data_time: 0.6664  memory: 3326  loss: 0.8543  decode.loss_ce: 0.5949  decode.acc_seg: 72.9296  aux.loss_ce: 0.2593  aux.acc_seg: 73.1595
2023/02/12 21:55:07 - mmengine - INFO - per class results:
2023/02/12 21:55:07 - mmengine - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  unlabeled  |  0.0  |  0.0  |
|  paved-area | 57.54 |  90.6 |
|     dirt    |  0.0  |  0.0  |
|    grass    |  69.4 | 90.62 |
|    gravel   | 13.15 | 43.02 |
|    water    |  0.0  |  0.0  |
|    rocks    |  0.0  |  0.0  |
|     pool    |  0.0  |  0.0  |
|  vegetation | 13.11 | 14.56 |
|     roof    |  0.0  |  0.0  |
|     wall    |  0.0  |  0.0  |
|    window   |  0.0  |  0.0  |
|     door    |  0.0  |  0.0  |
|    fence    |  0.0  |  0.0  |
|  fence-pole |  0.0  |  0.0  |
|    person   |  0.0  |  0.0  |
|     dog     |  0.0  |  0.0  |
|     car     |  0.0  |  0.0  |
|   bicycle   |  0.0  |  0.0  |
|     tree    |  0.0  |  0.0  |
|  bald-tree  |  0.0  |  0.0  |
|  ar-marker  |  0.0  |  0.0  |
|   obstacle  |  0.29 |  0.29 |
| conflicting |  nan  |  nan  |
+-------------+-------+-------+
2023/02/12 21:55:07 - mmengine - INFO - Iter(val) [80/80]  aAcc: 55.3400  mIoU: 6.6700  mAcc: 10.4000
2023/02/12 21:56:25 - mmengine - INFO - Iter(train) [200/800]  lr: 9.9778e-03  eta: 0:08:00  time: 0.8076  data_time: 0.6475  memory: 3491  loss: 0.9652  decode.loss_ce: 0.6848  decode.acc_seg: 68.9007  aux.loss_ce: 0.2804  aux.acc_seg: 68.3707
2023/02/12 21:56:38 - mmengine - INFO - per class results:
2023/02/12 21:56:38 - mmengine - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  unlabeled  |  0.0  |  0.0  |
|  paved-area | 60.95 | 78.16 |
|     dirt    |  0.0  |  0.0  |
|    grass    | 66.05 | 75.33 |
|    gravel   | 17.67 | 28.67 |
|    water    |  0.0  |  0.0  |
|    rocks    |  0.0  |  0.0  |
|     pool    |  0.0  |  0.0  |
|  vegetation | 32.55 | 86.31 |
|     roof    | 39.18 | 84.91 |
|     wall    |  0.0  |  0.0  |
|    window   |  0.0  |  0.0  |
|     door    |  0.0  |  0.0  |
|    fence    |  0.0  |  0.0  |
|  fence-pole |  0.0  |  0.0  |
|    person   |  0.0  |  0.0  |
|     dog     |  0.0  |  0.0  |
|     car     |  0.0  |  0.0  |
|   bicycle   |  0.0  |  0.0  |
|     tree    |  0.0  |  0.0  |
|  bald-tree  |  0.0  |  0.0  |
|  ar-marker  |  0.0  |  0.0  |
|   obstacle  |  4.61 |  5.28 |
| conflicting |  nan  |  nan  |
+-------------+-------+-------+
2023/02/12 21:56:38 - mmengine - INFO - Iter(val) [80/80]  aAcc: 59.4700  mIoU: 9.6100  mAcc: 15.5900
2023/02/12 21:57:58 - mmengine - INFO - Iter(train) [300/800]  lr: 9.9667e-03  eta: 0:06:39  time: 0.8241  data_time: 0.6699  memory: 3491  loss: 0.8775  decode.loss_ce: 0.6124  decode.acc_seg: 54.7907  aux.loss_ce: 0.2651  aux.acc_seg: 51.8908
2023/02/12 21:58:11 - mmengine - INFO - per class results:
2023/02/12 21:58:11 - mmengine - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  unlabeled  |  0.0  |  0.0  |
|  paved-area | 69.44 | 82.71 |
|     dirt    |  0.0  |  0.0  |
|    grass    | 58.44 | 65.79 |
|    gravel   | 18.38 | 25.63 |
|    water    |  0.0  |  0.0  |
|    rocks    |  0.0  |  0.0  |
|     pool    |  0.0  |  0.0  |
|  vegetation | 23.67 | 96.39 |
|     roof    |  53.0 | 73.05 |
|     wall    |  0.4  |  0.41 |
|    window   |  0.0  |  0.0  |
|     door    |  0.0  |  0.0  |
|    fence    |  0.0  |  0.0  |
|  fence-pole |  0.0  |  0.0  |
|    person   |  0.0  |  0.0  |
|     dog     |  0.0  |  0.0  |
|     car     |  0.0  |  0.0  |
|   bicycle   |  0.0  |  0.0  |
|     tree    |  0.0  |  0.0  |
|  bald-tree  |  0.0  |  0.0  |
|  ar-marker  |  0.0  |  0.0  |
|   obstacle  |  7.91 | 12.35 |
| conflicting |  nan  |  nan  |
+-------------+-------+-------+
2023/02/12 21:58:11 - mmengine - INFO - Iter(val) [80/80]  aAcc: 59.2900  mIoU: 10.0500  mAcc: 15.4900
2023/02/12 21:59:29 - mmengine - INFO - Iter(train) [400/800]  lr: 9.9555e-03  eta: 0:05:17  time: 0.8096  data_time: 0.6538  memory: 3487  loss: 0.8270  decode.loss_ce: 0.5780  decode.acc_seg: 59.5367  aux.loss_ce: 0.2490  aux.acc_seg: 58.3874
2023/02/12 21:59:29 - mmengine - INFO - Saving checkpoint at 400 iterations
2023/02/12 21:59:43 - mmengine - INFO - per class results:
2023/02/12 21:59:43 - mmengine - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  unlabeled  |  0.0  |  0.0  |
|  paved-area | 68.33 |  79.8 |
|     dirt    |  0.15 |  0.15 |
|    grass    | 70.31 | 81.18 |
|    gravel   | 30.52 | 52.47 |
|    water    | 11.93 |  14.7 |
|    rocks    |  0.0  |  0.0  |
|     pool    |  0.0  |  0.0  |
|  vegetation | 28.69 | 91.25 |
|     roof    | 54.92 | 66.94 |
|     wall    |  3.19 |  3.52 |
|    window   |  0.0  |  0.0  |
|     door    |  0.0  |  0.0  |
|    fence    |  0.0  |  0.0  |
|  fence-pole |  0.0  |  0.0  |
|    person   |  2.89 |  2.94 |
|     dog     |  0.0  |  0.0  |
|     car     |  0.0  |  0.0  |
|   bicycle   |  0.0  |  0.0  |
|     tree    |  1.21 |  1.36 |
|  bald-tree  |  0.0  |  0.0  |
|  ar-marker  |  0.0  |  0.0  |
|   obstacle  | 13.03 | 25.47 |
| conflicting |  nan  |  nan  |
+-------------+-------+-------+
2023/02/12 21:59:43 - mmengine - INFO - Iter(val) [80/80]  aAcc: 62.9000  mIoU: 12.4000  mAcc: 18.2500
2023/02/12 22:01:02 - mmengine - INFO - Iter(train) [500/800]  lr: 9.9444e-03  eta: 0:03:57  time: 0.8119  data_time: 0.6583  memory: 3491  loss: 0.6778  decode.loss_ce: 0.4656  decode.acc_seg: 73.9100  aux.loss_ce: 0.2122  aux.acc_seg: 71.9676
2023/02/12 22:01:15 - mmengine - INFO - per class results:
2023/02/12 22:01:15 - mmengine - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  unlabeled  |  0.0  |  0.0  |
|  paved-area |  73.3 | 93.08 |
|     dirt    |  2.77 |  2.84 |
|    grass    | 58.19 | 66.35 |
|    gravel   | 21.37 | 26.32 |
|    water    | 13.84 | 19.11 |
|    rocks    |  0.0  |  0.0  |
|     pool    |  2.64 |  2.65 |
|  vegetation | 30.18 | 90.02 |
|     roof    | 62.99 | 79.52 |
|     wall    |  7.32 |  9.82 |
|    window   |  0.0  |  0.0  |
|     door    |  0.0  |  0.0  |
|    fence    |  0.0  |  0.0  |
|  fence-pole |  0.0  |  0.0  |
|    person   |  4.96 |  5.29 |
|     dog     |  0.0  |  0.0  |
|     car     |  2.28 |  2.71 |
|   bicycle   |  0.0  |  0.0  |
|     tree    |  7.99 |  8.86 |
|  bald-tree  |  0.0  |  0.0  |
|  ar-marker  |  0.0  |  0.0  |
|   obstacle  | 12.33 |  17.3 |
| conflicting |  nan  |  nan  |
+-------------+-------+-------+
2023/02/12 22:01:15 - mmengine - INFO - Iter(val) [80/80]  aAcc: 64.7100  mIoU: 13.0500  mAcc: 18.4300
2023/02/12 22:02:33 - mmengine - INFO - Iter(train) [600/800]  lr: 9.9333e-03  eta: 0:02:37  time: 0.8154  data_time: 0.6596  memory: 3489  loss: 0.7913  decode.loss_ce: 0.5422  decode.acc_seg: 71.7618  aux.loss_ce: 0.2491  aux.acc_seg: 68.8692
2023/02/12 22:02:47 - mmengine - INFO - per class results:
2023/02/12 22:02:47 - mmengine - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  unlabeled  |  0.0  |  0.0  |
|  paved-area | 69.18 | 94.06 |
|     dirt    |  4.94 |  5.16 |
|    grass    | 74.63 | 96.61 |
|    gravel   | 38.55 | 51.82 |
|    water    | 25.85 | 29.82 |
|    rocks    |  0.0  |  0.0  |
|     pool    | 46.95 | 52.72 |
|  vegetation |  35.7 | 49.33 |
|     roof    | 57.62 | 73.06 |
|     wall    |  9.26 | 13.34 |
|    window   |  0.0  |  0.0  |
|     door    |  0.0  |  0.0  |
|    fence    |  0.0  |  0.0  |
|  fence-pole |  0.0  |  0.0  |
|    person   | 12.61 | 15.29 |
|     dog     |  0.0  |  0.0  |
|     car     |  3.45 |  3.53 |
|   bicycle   |  0.0  |  0.0  |
|     tree    |  0.0  |  0.0  |
|  bald-tree  |  0.0  |  0.0  |
|  ar-marker  |  0.0  |  0.0  |
|   obstacle  | 13.54 | 20.02 |
| conflicting |  nan  |  nan  |
+-------------+-------+-------+
2023/02/12 22:02:47 - mmengine - INFO - Iter(val) [80/80]  aAcc: 69.5700  mIoU: 17.0600  mAcc: 21.9500
2023/02/12 22:04:05 - mmengine - INFO - Iter(train) [700/800]  lr: 9.9221e-03  eta: 0:01:18  time: 0.8100  data_time: 0.6587  memory: 3491  loss: 0.6879  decode.loss_ce: 0.4695  decode.acc_seg: 76.6195  aux.loss_ce: 0.2184  aux.acc_seg: 71.7862
2023/02/12 22:04:18 - mmengine - INFO - per class results:
2023/02/12 22:04:18 - mmengine - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  unlabeled  |  0.0  |  0.0  |
|  paved-area | 76.08 | 85.82 |
|     dirt    | 19.44 | 24.84 |
|    grass    | 76.38 | 89.02 |
|    gravel   | 40.97 | 59.49 |
|    water    | 20.09 | 92.81 |
|    rocks    |  0.0  |  0.0  |
|     pool    | 65.67 |  75.9 |
|  vegetation | 36.11 | 56.41 |
|     roof    | 63.86 | 82.04 |
|     wall    | 12.28 | 17.04 |
|    window   |  0.0  |  0.0  |
|     door    |  0.0  |  0.0  |
|    fence    |  0.0  |  0.0  |
|  fence-pole |  0.0  |  0.0  |
|    person   | 10.72 | 11.87 |
|     dog     |  0.0  |  0.0  |
|     car     |  6.3  |  6.52 |
|   bicycle   |  0.0  |  0.0  |
|     tree    |  15.8 | 19.97 |
|  bald-tree  |  0.0  |  0.0  |
|  ar-marker  |  0.0  |  0.0  |
|   obstacle  |  17.3 | 29.53 |
| conflicting |  nan  |  nan  |
+-------------+-------+-------+
2023/02/12 22:04:18 - mmengine - INFO - Iter(val) [80/80]  aAcc: 69.8900  mIoU: 20.0400  mAcc: 28.3200
2023/02/12 22:05:36 - mmengine - INFO - Iter(train) [800/800]  lr: 9.9110e-03  eta: 0:00:00  time: 0.8170  data_time: 0.6629  memory: 3491  loss: 0.5892  decode.loss_ce: 0.4062  decode.acc_seg: 61.9996  aux.loss_ce: 0.1830  aux.acc_seg: 64.6261
2023/02/12 22:05:36 - mmengine - INFO - Saving checkpoint at 800 iterations
2023/02/12 22:05:50 - mmengine - INFO - per class results:
2023/02/12 22:05:50 - mmengine - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  unlabeled  |  0.0  |  0.0  |
|  paved-area | 72.87 | 94.24 |
|     dirt    | 22.22 | 29.71 |
|    grass    | 79.38 | 94.03 |
|    gravel   | 43.69 | 55.12 |
|    water    | 45.72 | 48.87 |
|    rocks    |  0.0  |  0.0  |
|     pool    | 47.24 | 51.76 |
|  vegetation | 36.73 | 54.88 |
|     roof    | 46.28 | 48.42 |
|     wall    |  8.34 | 11.53 |
|    window   |  0.0  |  0.0  |
|     door    |  0.0  |  0.0  |
|    fence    |  0.0  |  0.0  |
|  fence-pole |  0.0  |  0.0  |
|    person   | 20.37 | 34.16 |
|     dog     |  0.0  |  0.0  |
|     car     | 24.49 | 25.32 |
|   bicycle   |  0.0  |  0.0  |
|     tree    | 28.22 | 42.09 |
|  bald-tree  |  0.0  |  0.0  |
|  ar-marker  |  0.0  |  0.0  |
|   obstacle  | 17.22 | 36.64 |
| conflicting |  nan  |  nan  |
+-------------+-------+-------+
2023/02/12 22:05:50 - mmengine - INFO - Iter(val) [80/80]  aAcc: 70.9500  mIoU: 21.4200  mAcc: 27.2500
