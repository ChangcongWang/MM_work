2023-02-05 16:19:02,668 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.9.7 (default, Sep 16 2021, 13:09:58) [GCC 7.5.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 3070 Laptop GPU
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.6, V11.6.124
GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
PyTorch: 1.11.0
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.12.0
OpenCV: 4.6.0
MMCV: 1.6.0
MMCV Compiler: GCC 9.3
MMCV CUDA Compiler: 11.3
MMClassification: 0.25.0+3d4f80d
------------------------------------------------------------

2023-02-05 16:19:02,669 - mmcls - INFO - Distributed training: False
2023-02-05 16:19:02,902 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ConvNeXt',
        arch='tiny',
        out_indices=(3, ),
        drop_path_rate=0.1,
        gap_before_final_norm=True,
        init_cfg=[
            dict(
                type='TruncNormal',
                layer=['Conv2d', 'Linear'],
                std=0.02,
                bias=0.0),
            dict(type='Constant', layer=['LayerNorm'], val=1.0, bias=0.0)
        ]),
    head=dict(
        type='LinearClsHead',
        num_classes=5,
        in_channels=768,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=1))
rand_increasing_policies = [
    dict(type='AutoContrast'),
    dict(type='Equalize'),
    dict(type='Invert'),
    dict(type='Rotate', magnitude_key='angle', magnitude_range=(0, 30)),
    dict(type='Posterize', magnitude_key='bits', magnitude_range=(4, 0)),
    dict(type='Solarize', magnitude_key='thr', magnitude_range=(256, 0)),
    dict(
        type='SolarizeAdd',
        magnitude_key='magnitude',
        magnitude_range=(0, 110)),
    dict(
        type='ColorTransform',
        magnitude_key='magnitude',
        magnitude_range=(0, 0.9)),
    dict(type='Contrast', magnitude_key='magnitude', magnitude_range=(0, 0.9)),
    dict(
        type='Brightness', magnitude_key='magnitude',
        magnitude_range=(0, 0.9)),
    dict(
        type='Sharpness', magnitude_key='magnitude', magnitude_range=(0, 0.9)),
    dict(
        type='Shear',
        magnitude_key='magnitude',
        magnitude_range=(0, 0.3),
        direction='horizontal'),
    dict(
        type='Shear',
        magnitude_key='magnitude',
        magnitude_range=(0, 0.3),
        direction='vertical'),
    dict(
        type='Translate',
        magnitude_key='magnitude',
        magnitude_range=(0, 0.45),
        direction='horizontal'),
    dict(
        type='Translate',
        magnitude_key='magnitude',
        magnitude_range=(0, 0.45),
        direction='vertical')
]
dataset_type = 'ImageNet'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='RandomResizedCrop',
        size=224,
        backend='pillow',
        interpolation='bicubic'),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='RandAugment',
        policies=[
            dict(type='AutoContrast'),
            dict(type='Equalize'),
            dict(type='Invert'),
            dict(
                type='Rotate', magnitude_key='angle', magnitude_range=(0, 30)),
            dict(
                type='Posterize', magnitude_key='bits',
                magnitude_range=(4, 0)),
            dict(
                type='Solarize', magnitude_key='thr',
                magnitude_range=(256, 0)),
            dict(
                type='SolarizeAdd',
                magnitude_key='magnitude',
                magnitude_range=(0, 110)),
            dict(
                type='ColorTransform',
                magnitude_key='magnitude',
                magnitude_range=(0, 0.9)),
            dict(
                type='Contrast',
                magnitude_key='magnitude',
                magnitude_range=(0, 0.9)),
            dict(
                type='Brightness',
                magnitude_key='magnitude',
                magnitude_range=(0, 0.9)),
            dict(
                type='Sharpness',
                magnitude_key='magnitude',
                magnitude_range=(0, 0.9)),
            dict(
                type='Shear',
                magnitude_key='magnitude',
                magnitude_range=(0, 0.3),
                direction='horizontal'),
            dict(
                type='Shear',
                magnitude_key='magnitude',
                magnitude_range=(0, 0.3),
                direction='vertical'),
            dict(
                type='Translate',
                magnitude_key='magnitude',
                magnitude_range=(0, 0.45),
                direction='horizontal'),
            dict(
                type='Translate',
                magnitude_key='magnitude',
                magnitude_range=(0, 0.45),
                direction='vertical')
        ],
        num_policies=2,
        total_level=10,
        magnitude_level=9,
        magnitude_std=0.5,
        hparams=dict(pad_val=[104, 116, 124], interpolation='bicubic')),
    dict(
        type='RandomErasing',
        erase_prob=0.25,
        mode='rand',
        min_area_ratio=0.02,
        max_area_ratio=0.3333333333333333,
        fill_color=[103.53, 116.28, 123.675],
        fill_std=[57.375, 57.12, 58.395]),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='Resize',
        size=(256, -1),
        backend='pillow',
        interpolation='bicubic'),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=32,
    workers_per_gpu=2,
    train=dict(
        type='CustomDataset',
        data_prefix='data/flower_dataset/train',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='RandomResizedCrop',
                size=224,
                backend='pillow',
                interpolation='bicubic'),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='RandAugment',
                policies=[
                    dict(type='AutoContrast'),
                    dict(type='Equalize'),
                    dict(type='Invert'),
                    dict(
                        type='Rotate',
                        magnitude_key='angle',
                        magnitude_range=(0, 30)),
                    dict(
                        type='Posterize',
                        magnitude_key='bits',
                        magnitude_range=(4, 0)),
                    dict(
                        type='Solarize',
                        magnitude_key='thr',
                        magnitude_range=(256, 0)),
                    dict(
                        type='SolarizeAdd',
                        magnitude_key='magnitude',
                        magnitude_range=(0, 110)),
                    dict(
                        type='ColorTransform',
                        magnitude_key='magnitude',
                        magnitude_range=(0, 0.9)),
                    dict(
                        type='Contrast',
                        magnitude_key='magnitude',
                        magnitude_range=(0, 0.9)),
                    dict(
                        type='Brightness',
                        magnitude_key='magnitude',
                        magnitude_range=(0, 0.9)),
                    dict(
                        type='Sharpness',
                        magnitude_key='magnitude',
                        magnitude_range=(0, 0.9)),
                    dict(
                        type='Shear',
                        magnitude_key='magnitude',
                        magnitude_range=(0, 0.3),
                        direction='horizontal'),
                    dict(
                        type='Shear',
                        magnitude_key='magnitude',
                        magnitude_range=(0, 0.3),
                        direction='vertical'),
                    dict(
                        type='Translate',
                        magnitude_key='magnitude',
                        magnitude_range=(0, 0.45),
                        direction='horizontal'),
                    dict(
                        type='Translate',
                        magnitude_key='magnitude',
                        magnitude_range=(0, 0.45),
                        direction='vertical')
                ],
                num_policies=2,
                total_level=10,
                magnitude_level=9,
                magnitude_std=0.5,
                hparams=dict(pad_val=[104, 116, 124],
                             interpolation='bicubic')),
            dict(
                type='RandomErasing',
                erase_prob=0.25,
                mode='rand',
                min_area_ratio=0.02,
                max_area_ratio=0.3333333333333333,
                fill_color=[103.53, 116.28, 123.675],
                fill_std=[57.375, 57.12, 58.395]),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ]),
    val=dict(
        type='CustomDataset',
        data_prefix='data/flower_dataset/val',
        ann_file=None,
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='Resize',
                size=(256, -1),
                backend='pillow',
                interpolation='bicubic'),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]),
    test=dict(
        type='CustomDataset',
        data_prefix='data/flower_dataset/val',
        ann_file=None,
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='Resize',
                size=(256, -1),
                backend='pillow',
                interpolation='bicubic'),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(interval=1, metric='accuracy')
paramwise_cfg = dict(
    norm_decay_mult=0.0,
    bias_decay_mult=0.0,
    custom_keys=dict({
        '.absolute_pos_embed': dict(decay_mult=0.0),
        '.relative_position_bias_table': dict(decay_mult=0.0)
    }))
optimizer = dict(
    type='AdamW',
    lr=0.001,
    weight_decay=0.05,
    eps=1e-08,
    betas=(0.9, 0.999),
    paramwise_cfg=dict(
        norm_decay_mult=0.0,
        bias_decay_mult=0.0,
        custom_keys=dict({
            '.absolute_pos_embed': dict(decay_mult=0.0),
            '.relative_position_bias_table': dict(decay_mult=0.0)
        })))
optimizer_config = dict(grad_clip=dict(max_norm=5.0))
lr_config = dict(
    policy='CosineAnnealing',
    by_epoch=False,
    min_lr_ratio=0.01,
    warmup='linear',
    warmup_ratio=0.001,
    warmup_iters=20,
    warmup_by_epoch=True)
runner = dict(type='EpochBasedRunner', max_epochs=100)
checkpoint_config = dict(interval=1)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = 'work_dirs/myconvnext-tiny_32xb128_in1k/latest.pth'
resume_from = None
workflow = [('train', 1)]
custom_hooks = [dict(type='EMAHook', momentum=4e-05, priority='ABOVE_NORMAL')]
work_dir = './work_dirs/myconvnext-tiny_32xb128_in1k'
gpu_ids = range(0, 1)

2023-02-05 16:19:02,902 - mmcls - INFO - Set random seed to 1885442124, deterministic: False
2023-02-05 16:19:03,032 - mmcls - INFO - initialize ConvNeXt with init_cfg [{'type': 'TruncNormal', 'layer': ['Conv2d', 'Linear'], 'std': 0.02, 'bias': 0.0}, {'type': 'Constant', 'layer': ['LayerNorm'], 'val': 1.0, 'bias': 0.0}]
2023-02-05 16:19:03,171 - mmcls - INFO - initialize LinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
Name of parameter - Initialization information

backbone.downsample_layers.0.0.weight - torch.Size([96, 3, 4, 4]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.downsample_layers.0.0.bias - torch.Size([96]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.downsample_layers.0.1.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.downsample_layers.0.1.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.downsample_layers.1.0.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.downsample_layers.1.0.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.downsample_layers.1.1.weight - torch.Size([192, 96, 2, 2]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.downsample_layers.1.1.bias - torch.Size([192]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.downsample_layers.2.0.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.downsample_layers.2.0.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.downsample_layers.2.1.weight - torch.Size([384, 192, 2, 2]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.downsample_layers.2.1.bias - torch.Size([384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.downsample_layers.3.0.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.downsample_layers.3.0.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.downsample_layers.3.1.weight - torch.Size([768, 384, 2, 2]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.downsample_layers.3.1.bias - torch.Size([768]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.0.gamma - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.0.depthwise_conv.weight - torch.Size([96, 1, 7, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.0.depthwise_conv.bias - torch.Size([96]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.0.norm.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.0.norm.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.0.pointwise_conv1.weight - torch.Size([384, 96]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.0.pointwise_conv1.bias - torch.Size([384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.0.pointwise_conv2.weight - torch.Size([96, 384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.0.pointwise_conv2.bias - torch.Size([96]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.1.gamma - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.1.depthwise_conv.weight - torch.Size([96, 1, 7, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.1.depthwise_conv.bias - torch.Size([96]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.1.norm.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.1.norm.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.1.pointwise_conv1.weight - torch.Size([384, 96]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.1.pointwise_conv1.bias - torch.Size([384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.1.pointwise_conv2.weight - torch.Size([96, 384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.1.pointwise_conv2.bias - torch.Size([96]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.2.gamma - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.2.depthwise_conv.weight - torch.Size([96, 1, 7, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.2.depthwise_conv.bias - torch.Size([96]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.2.norm.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.2.norm.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.0.2.pointwise_conv1.weight - torch.Size([384, 96]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.2.pointwise_conv1.bias - torch.Size([384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.2.pointwise_conv2.weight - torch.Size([96, 384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.0.2.pointwise_conv2.bias - torch.Size([96]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.0.gamma - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.0.depthwise_conv.weight - torch.Size([192, 1, 7, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.0.depthwise_conv.bias - torch.Size([192]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.0.norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.0.norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.0.pointwise_conv1.weight - torch.Size([768, 192]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.0.pointwise_conv1.bias - torch.Size([768]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.0.pointwise_conv2.weight - torch.Size([192, 768]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.0.pointwise_conv2.bias - torch.Size([192]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.1.gamma - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.1.depthwise_conv.weight - torch.Size([192, 1, 7, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.1.depthwise_conv.bias - torch.Size([192]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.1.norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.1.norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.1.pointwise_conv1.weight - torch.Size([768, 192]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.1.pointwise_conv1.bias - torch.Size([768]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.1.pointwise_conv2.weight - torch.Size([192, 768]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.1.pointwise_conv2.bias - torch.Size([192]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.2.gamma - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.2.depthwise_conv.weight - torch.Size([192, 1, 7, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.2.depthwise_conv.bias - torch.Size([192]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.2.norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.2.norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.1.2.pointwise_conv1.weight - torch.Size([768, 192]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.2.pointwise_conv1.bias - torch.Size([768]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.2.pointwise_conv2.weight - torch.Size([192, 768]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.1.2.pointwise_conv2.bias - torch.Size([192]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.0.gamma - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.0.depthwise_conv.weight - torch.Size([384, 1, 7, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.0.depthwise_conv.bias - torch.Size([384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.0.norm.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.0.norm.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.0.pointwise_conv1.weight - torch.Size([1536, 384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.0.pointwise_conv1.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.0.pointwise_conv2.weight - torch.Size([384, 1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.0.pointwise_conv2.bias - torch.Size([384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.1.gamma - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.1.depthwise_conv.weight - torch.Size([384, 1, 7, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.1.depthwise_conv.bias - torch.Size([384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.1.norm.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.1.norm.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.1.pointwise_conv1.weight - torch.Size([1536, 384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.1.pointwise_conv1.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.1.pointwise_conv2.weight - torch.Size([384, 1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.1.pointwise_conv2.bias - torch.Size([384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.2.gamma - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.2.depthwise_conv.weight - torch.Size([384, 1, 7, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.2.depthwise_conv.bias - torch.Size([384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.2.norm.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.2.norm.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.2.pointwise_conv1.weight - torch.Size([1536, 384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.2.pointwise_conv1.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.2.pointwise_conv2.weight - torch.Size([384, 1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.2.pointwise_conv2.bias - torch.Size([384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.3.gamma - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.3.depthwise_conv.weight - torch.Size([384, 1, 7, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.3.depthwise_conv.bias - torch.Size([384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.3.norm.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.3.norm.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.3.pointwise_conv1.weight - torch.Size([1536, 384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.3.pointwise_conv1.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.3.pointwise_conv2.weight - torch.Size([384, 1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.3.pointwise_conv2.bias - torch.Size([384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.4.gamma - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.4.depthwise_conv.weight - torch.Size([384, 1, 7, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.4.depthwise_conv.bias - torch.Size([384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.4.norm.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.4.norm.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.4.pointwise_conv1.weight - torch.Size([1536, 384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.4.pointwise_conv1.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.4.pointwise_conv2.weight - torch.Size([384, 1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.4.pointwise_conv2.bias - torch.Size([384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.5.gamma - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.5.depthwise_conv.weight - torch.Size([384, 1, 7, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.5.depthwise_conv.bias - torch.Size([384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.5.norm.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.5.norm.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.5.pointwise_conv1.weight - torch.Size([1536, 384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.5.pointwise_conv1.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.5.pointwise_conv2.weight - torch.Size([384, 1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.5.pointwise_conv2.bias - torch.Size([384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.6.gamma - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.6.depthwise_conv.weight - torch.Size([384, 1, 7, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.6.depthwise_conv.bias - torch.Size([384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.6.norm.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.6.norm.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.6.pointwise_conv1.weight - torch.Size([1536, 384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.6.pointwise_conv1.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.6.pointwise_conv2.weight - torch.Size([384, 1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.6.pointwise_conv2.bias - torch.Size([384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.7.gamma - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.7.depthwise_conv.weight - torch.Size([384, 1, 7, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.7.depthwise_conv.bias - torch.Size([384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.7.norm.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.7.norm.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.7.pointwise_conv1.weight - torch.Size([1536, 384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.7.pointwise_conv1.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.7.pointwise_conv2.weight - torch.Size([384, 1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.7.pointwise_conv2.bias - torch.Size([384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.8.gamma - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.8.depthwise_conv.weight - torch.Size([384, 1, 7, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.8.depthwise_conv.bias - torch.Size([384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.8.norm.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.8.norm.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.2.8.pointwise_conv1.weight - torch.Size([1536, 384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.8.pointwise_conv1.bias - torch.Size([1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.8.pointwise_conv2.weight - torch.Size([384, 1536]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.2.8.pointwise_conv2.bias - torch.Size([384]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.0.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.0.depthwise_conv.weight - torch.Size([768, 1, 7, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.0.depthwise_conv.bias - torch.Size([768]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.0.norm.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.0.norm.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.0.pointwise_conv1.weight - torch.Size([3072, 768]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.0.pointwise_conv1.bias - torch.Size([3072]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.0.pointwise_conv2.weight - torch.Size([768, 3072]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.0.pointwise_conv2.bias - torch.Size([768]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.1.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.1.depthwise_conv.weight - torch.Size([768, 1, 7, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.1.depthwise_conv.bias - torch.Size([768]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.1.norm.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.1.norm.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.1.pointwise_conv1.weight - torch.Size([3072, 768]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.1.pointwise_conv1.bias - torch.Size([3072]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.1.pointwise_conv2.weight - torch.Size([768, 3072]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.1.pointwise_conv2.bias - torch.Size([768]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.2.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.2.depthwise_conv.weight - torch.Size([768, 1, 7, 7]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.2.depthwise_conv.bias - torch.Size([768]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.2.norm.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.2.norm.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.stages.3.2.pointwise_conv1.weight - torch.Size([3072, 768]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.2.pointwise_conv1.bias - torch.Size([3072]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.2.pointwise_conv2.weight - torch.Size([768, 3072]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.stages.3.2.pointwise_conv2.bias - torch.Size([768]): 
TruncNormalInit: a=-2, b=2, mean=0, std=0.02, bias=0.0 

backbone.norm3.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.norm3.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([5, 768]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 
2023-02-05 16:19:05,692 - mmcls - INFO - load checkpoint from local path: work_dirs/myconvnext-tiny_32xb128_in1k/latest.pth
2023-02-05 16:19:05,894 - mmcls - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: ema_backbone_downsample_layers_0_0_weight, ema_backbone_downsample_layers_0_0_bias, ema_backbone_downsample_layers_0_1_weight, ema_backbone_downsample_layers_0_1_bias, ema_backbone_downsample_layers_1_0_weight, ema_backbone_downsample_layers_1_0_bias, ema_backbone_downsample_layers_1_1_weight, ema_backbone_downsample_layers_1_1_bias, ema_backbone_downsample_layers_2_0_weight, ema_backbone_downsample_layers_2_0_bias, ema_backbone_downsample_layers_2_1_weight, ema_backbone_downsample_layers_2_1_bias, ema_backbone_downsample_layers_3_0_weight, ema_backbone_downsample_layers_3_0_bias, ema_backbone_downsample_layers_3_1_weight, ema_backbone_downsample_layers_3_1_bias, ema_backbone_stages_0_0_gamma, ema_backbone_stages_0_0_depthwise_conv_weight, ema_backbone_stages_0_0_depthwise_conv_bias, ema_backbone_stages_0_0_norm_weight, ema_backbone_stages_0_0_norm_bias, ema_backbone_stages_0_0_pointwise_conv1_weight, ema_backbone_stages_0_0_pointwise_conv1_bias, ema_backbone_stages_0_0_pointwise_conv2_weight, ema_backbone_stages_0_0_pointwise_conv2_bias, ema_backbone_stages_0_1_gamma, ema_backbone_stages_0_1_depthwise_conv_weight, ema_backbone_stages_0_1_depthwise_conv_bias, ema_backbone_stages_0_1_norm_weight, ema_backbone_stages_0_1_norm_bias, ema_backbone_stages_0_1_pointwise_conv1_weight, ema_backbone_stages_0_1_pointwise_conv1_bias, ema_backbone_stages_0_1_pointwise_conv2_weight, ema_backbone_stages_0_1_pointwise_conv2_bias, ema_backbone_stages_0_2_gamma, ema_backbone_stages_0_2_depthwise_conv_weight, ema_backbone_stages_0_2_depthwise_conv_bias, ema_backbone_stages_0_2_norm_weight, ema_backbone_stages_0_2_norm_bias, ema_backbone_stages_0_2_pointwise_conv1_weight, ema_backbone_stages_0_2_pointwise_conv1_bias, ema_backbone_stages_0_2_pointwise_conv2_weight, ema_backbone_stages_0_2_pointwise_conv2_bias, ema_backbone_stages_1_0_gamma, ema_backbone_stages_1_0_depthwise_conv_weight, ema_backbone_stages_1_0_depthwise_conv_bias, ema_backbone_stages_1_0_norm_weight, ema_backbone_stages_1_0_norm_bias, ema_backbone_stages_1_0_pointwise_conv1_weight, ema_backbone_stages_1_0_pointwise_conv1_bias, ema_backbone_stages_1_0_pointwise_conv2_weight, ema_backbone_stages_1_0_pointwise_conv2_bias, ema_backbone_stages_1_1_gamma, ema_backbone_stages_1_1_depthwise_conv_weight, ema_backbone_stages_1_1_depthwise_conv_bias, ema_backbone_stages_1_1_norm_weight, ema_backbone_stages_1_1_norm_bias, ema_backbone_stages_1_1_pointwise_conv1_weight, ema_backbone_stages_1_1_pointwise_conv1_bias, ema_backbone_stages_1_1_pointwise_conv2_weight, ema_backbone_stages_1_1_pointwise_conv2_bias, ema_backbone_stages_1_2_gamma, ema_backbone_stages_1_2_depthwise_conv_weight, ema_backbone_stages_1_2_depthwise_conv_bias, ema_backbone_stages_1_2_norm_weight, ema_backbone_stages_1_2_norm_bias, ema_backbone_stages_1_2_pointwise_conv1_weight, ema_backbone_stages_1_2_pointwise_conv1_bias, ema_backbone_stages_1_2_pointwise_conv2_weight, ema_backbone_stages_1_2_pointwise_conv2_bias, ema_backbone_stages_2_0_gamma, ema_backbone_stages_2_0_depthwise_conv_weight, ema_backbone_stages_2_0_depthwise_conv_bias, ema_backbone_stages_2_0_norm_weight, ema_backbone_stages_2_0_norm_bias, ema_backbone_stages_2_0_pointwise_conv1_weight, ema_backbone_stages_2_0_pointwise_conv1_bias, ema_backbone_stages_2_0_pointwise_conv2_weight, ema_backbone_stages_2_0_pointwise_conv2_bias, ema_backbone_stages_2_1_gamma, ema_backbone_stages_2_1_depthwise_conv_weight, ema_backbone_stages_2_1_depthwise_conv_bias, ema_backbone_stages_2_1_norm_weight, ema_backbone_stages_2_1_norm_bias, ema_backbone_stages_2_1_pointwise_conv1_weight, ema_backbone_stages_2_1_pointwise_conv1_bias, ema_backbone_stages_2_1_pointwise_conv2_weight, ema_backbone_stages_2_1_pointwise_conv2_bias, ema_backbone_stages_2_2_gamma, ema_backbone_stages_2_2_depthwise_conv_weight, ema_backbone_stages_2_2_depthwise_conv_bias, ema_backbone_stages_2_2_norm_weight, ema_backbone_stages_2_2_norm_bias, ema_backbone_stages_2_2_pointwise_conv1_weight, ema_backbone_stages_2_2_pointwise_conv1_bias, ema_backbone_stages_2_2_pointwise_conv2_weight, ema_backbone_stages_2_2_pointwise_conv2_bias, ema_backbone_stages_2_3_gamma, ema_backbone_stages_2_3_depthwise_conv_weight, ema_backbone_stages_2_3_depthwise_conv_bias, ema_backbone_stages_2_3_norm_weight, ema_backbone_stages_2_3_norm_bias, ema_backbone_stages_2_3_pointwise_conv1_weight, ema_backbone_stages_2_3_pointwise_conv1_bias, ema_backbone_stages_2_3_pointwise_conv2_weight, ema_backbone_stages_2_3_pointwise_conv2_bias, ema_backbone_stages_2_4_gamma, ema_backbone_stages_2_4_depthwise_conv_weight, ema_backbone_stages_2_4_depthwise_conv_bias, ema_backbone_stages_2_4_norm_weight, ema_backbone_stages_2_4_norm_bias, ema_backbone_stages_2_4_pointwise_conv1_weight, ema_backbone_stages_2_4_pointwise_conv1_bias, ema_backbone_stages_2_4_pointwise_conv2_weight, ema_backbone_stages_2_4_pointwise_conv2_bias, ema_backbone_stages_2_5_gamma, ema_backbone_stages_2_5_depthwise_conv_weight, ema_backbone_stages_2_5_depthwise_conv_bias, ema_backbone_stages_2_5_norm_weight, ema_backbone_stages_2_5_norm_bias, ema_backbone_stages_2_5_pointwise_conv1_weight, ema_backbone_stages_2_5_pointwise_conv1_bias, ema_backbone_stages_2_5_pointwise_conv2_weight, ema_backbone_stages_2_5_pointwise_conv2_bias, ema_backbone_stages_2_6_gamma, ema_backbone_stages_2_6_depthwise_conv_weight, ema_backbone_stages_2_6_depthwise_conv_bias, ema_backbone_stages_2_6_norm_weight, ema_backbone_stages_2_6_norm_bias, ema_backbone_stages_2_6_pointwise_conv1_weight, ema_backbone_stages_2_6_pointwise_conv1_bias, ema_backbone_stages_2_6_pointwise_conv2_weight, ema_backbone_stages_2_6_pointwise_conv2_bias, ema_backbone_stages_2_7_gamma, ema_backbone_stages_2_7_depthwise_conv_weight, ema_backbone_stages_2_7_depthwise_conv_bias, ema_backbone_stages_2_7_norm_weight, ema_backbone_stages_2_7_norm_bias, ema_backbone_stages_2_7_pointwise_conv1_weight, ema_backbone_stages_2_7_pointwise_conv1_bias, ema_backbone_stages_2_7_pointwise_conv2_weight, ema_backbone_stages_2_7_pointwise_conv2_bias, ema_backbone_stages_2_8_gamma, ema_backbone_stages_2_8_depthwise_conv_weight, ema_backbone_stages_2_8_depthwise_conv_bias, ema_backbone_stages_2_8_norm_weight, ema_backbone_stages_2_8_norm_bias, ema_backbone_stages_2_8_pointwise_conv1_weight, ema_backbone_stages_2_8_pointwise_conv1_bias, ema_backbone_stages_2_8_pointwise_conv2_weight, ema_backbone_stages_2_8_pointwise_conv2_bias, ema_backbone_stages_3_0_gamma, ema_backbone_stages_3_0_depthwise_conv_weight, ema_backbone_stages_3_0_depthwise_conv_bias, ema_backbone_stages_3_0_norm_weight, ema_backbone_stages_3_0_norm_bias, ema_backbone_stages_3_0_pointwise_conv1_weight, ema_backbone_stages_3_0_pointwise_conv1_bias, ema_backbone_stages_3_0_pointwise_conv2_weight, ema_backbone_stages_3_0_pointwise_conv2_bias, ema_backbone_stages_3_1_gamma, ema_backbone_stages_3_1_depthwise_conv_weight, ema_backbone_stages_3_1_depthwise_conv_bias, ema_backbone_stages_3_1_norm_weight, ema_backbone_stages_3_1_norm_bias, ema_backbone_stages_3_1_pointwise_conv1_weight, ema_backbone_stages_3_1_pointwise_conv1_bias, ema_backbone_stages_3_1_pointwise_conv2_weight, ema_backbone_stages_3_1_pointwise_conv2_bias, ema_backbone_stages_3_2_gamma, ema_backbone_stages_3_2_depthwise_conv_weight, ema_backbone_stages_3_2_depthwise_conv_bias, ema_backbone_stages_3_2_norm_weight, ema_backbone_stages_3_2_norm_bias, ema_backbone_stages_3_2_pointwise_conv1_weight, ema_backbone_stages_3_2_pointwise_conv1_bias, ema_backbone_stages_3_2_pointwise_conv2_weight, ema_backbone_stages_3_2_pointwise_conv2_bias, ema_backbone_norm3_weight, ema_backbone_norm3_bias, ema_head_fc_weight, ema_head_fc_bias

2023-02-05 16:19:05,903 - mmcls - INFO - Start running, host: sucro@sucro, work_dir: /home/sucro/wccsoftware/mmclassification/work_dirs/myconvnext-tiny_32xb128_in1k
2023-02-05 16:19:05,903 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(ABOVE_NORMAL) EMAHook                            
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(ABOVE_NORMAL) EMAHook                            
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(ABOVE_NORMAL) EMAHook                            
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(ABOVE_NORMAL) EMAHook                            
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-05 16:19:05,904 - mmcls - INFO - workflow: [('train', 1)], max: 100 epochs
2023-02-05 16:19:05,908 - mmcls - INFO - Checkpoints will be saved to /home/sucro/wccsoftware/mmclassification/work_dirs/myconvnext-tiny_32xb128_in1k by HardDiskBackend.
2023-02-05 16:19:23,639 - mmcls - INFO - Saving checkpoint at 1 epochs
2023-02-05 16:19:26,008 - mmcls - INFO - Epoch(val) [1][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 16:19:43,005 - mmcls - INFO - Saving checkpoint at 2 epochs
2023-02-05 16:19:45,314 - mmcls - INFO - Epoch(val) [2][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 16:20:02,326 - mmcls - INFO - Saving checkpoint at 3 epochs
2023-02-05 16:20:04,647 - mmcls - INFO - Epoch(val) [3][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 16:20:21,689 - mmcls - INFO - Saving checkpoint at 4 epochs
2023-02-05 16:20:23,926 - mmcls - INFO - Epoch(val) [4][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 16:20:40,994 - mmcls - INFO - Saving checkpoint at 5 epochs
2023-02-05 16:20:43,227 - mmcls - INFO - Epoch(val) [5][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 16:21:00,342 - mmcls - INFO - Saving checkpoint at 6 epochs
2023-02-05 16:21:02,572 - mmcls - INFO - Epoch(val) [6][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 16:21:19,705 - mmcls - INFO - Saving checkpoint at 7 epochs
2023-02-05 16:21:21,957 - mmcls - INFO - Epoch(val) [7][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 16:21:39,098 - mmcls - INFO - Saving checkpoint at 8 epochs
2023-02-05 16:21:41,369 - mmcls - INFO - Epoch(val) [8][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 16:21:58,536 - mmcls - INFO - Saving checkpoint at 9 epochs
2023-02-05 16:22:00,782 - mmcls - INFO - Epoch(val) [9][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 16:22:17,964 - mmcls - INFO - Saving checkpoint at 10 epochs
2023-02-05 16:22:20,204 - mmcls - INFO - Epoch(val) [10][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 16:22:37,900 - mmcls - INFO - Saving checkpoint at 11 epochs
2023-02-05 16:22:40,192 - mmcls - INFO - Epoch(val) [11][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 16:22:57,809 - mmcls - INFO - Saving checkpoint at 12 epochs
2023-02-05 16:23:00,079 - mmcls - INFO - Epoch(val) [12][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 16:23:17,533 - mmcls - INFO - Saving checkpoint at 13 epochs
2023-02-05 16:23:19,801 - mmcls - INFO - Epoch(val) [13][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 16:23:37,150 - mmcls - INFO - Saving checkpoint at 14 epochs
2023-02-05 16:23:39,413 - mmcls - INFO - Epoch(val) [14][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 16:23:56,954 - mmcls - INFO - Saving checkpoint at 15 epochs
2023-02-05 16:23:59,260 - mmcls - INFO - Epoch(val) [15][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 16:24:16,945 - mmcls - INFO - Saving checkpoint at 16 epochs
2023-02-05 16:24:19,224 - mmcls - INFO - Epoch(val) [16][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 16:24:36,946 - mmcls - INFO - Saving checkpoint at 17 epochs
2023-02-05 16:24:39,231 - mmcls - INFO - Epoch(val) [17][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 16:24:56,702 - mmcls - INFO - Saving checkpoint at 18 epochs
2023-02-05 16:24:58,976 - mmcls - INFO - Epoch(val) [18][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-05 16:25:16,412 - mmcls - INFO - Saving checkpoint at 19 epochs
2023-02-05 16:25:18,690 - mmcls - INFO - Epoch(val) [19][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-05 16:25:36,817 - mmcls - INFO - Saving checkpoint at 20 epochs
2023-02-05 16:25:39,173 - mmcls - INFO - Epoch(val) [20][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-05 16:25:56,989 - mmcls - INFO - Saving checkpoint at 21 epochs
2023-02-05 16:25:59,270 - mmcls - INFO - Epoch(val) [21][18]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-05 16:26:17,031 - mmcls - INFO - Saving checkpoint at 22 epochs
2023-02-05 16:26:19,249 - mmcls - INFO - Epoch(val) [22][18]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-05 16:26:36,653 - mmcls - INFO - Saving checkpoint at 23 epochs
2023-02-05 16:26:38,919 - mmcls - INFO - Epoch(val) [23][18]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-05 16:26:56,322 - mmcls - INFO - Saving checkpoint at 24 epochs
2023-02-05 16:26:58,615 - mmcls - INFO - Epoch(val) [24][18]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-05 16:27:16,001 - mmcls - INFO - Saving checkpoint at 25 epochs
2023-02-05 16:27:18,266 - mmcls - INFO - Epoch(val) [25][18]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-05 16:27:35,666 - mmcls - INFO - Saving checkpoint at 26 epochs
2023-02-05 16:27:37,919 - mmcls - INFO - Epoch(val) [26][18]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-05 16:27:55,323 - mmcls - INFO - Saving checkpoint at 27 epochs
2023-02-05 16:27:57,610 - mmcls - INFO - Epoch(val) [27][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-05 16:28:15,005 - mmcls - INFO - Saving checkpoint at 28 epochs
2023-02-05 16:28:17,294 - mmcls - INFO - Epoch(val) [28][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-05 16:28:34,710 - mmcls - INFO - Saving checkpoint at 29 epochs
2023-02-05 16:28:37,025 - mmcls - INFO - Epoch(val) [29][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-05 16:28:54,751 - mmcls - INFO - Saving checkpoint at 30 epochs
2023-02-05 16:28:57,045 - mmcls - INFO - Epoch(val) [30][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-05 16:29:14,790 - mmcls - INFO - Saving checkpoint at 31 epochs
2023-02-05 16:29:17,080 - mmcls - INFO - Epoch(val) [31][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-05 16:29:34,731 - mmcls - INFO - Saving checkpoint at 32 epochs
2023-02-05 16:29:37,045 - mmcls - INFO - Epoch(val) [32][18]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-05 16:29:55,775 - mmcls - INFO - Saving checkpoint at 33 epochs
2023-02-05 16:29:58,128 - mmcls - INFO - Epoch(val) [33][18]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-05 16:30:16,764 - mmcls - INFO - Saving checkpoint at 34 epochs
2023-02-05 16:30:19,068 - mmcls - INFO - Epoch(val) [34][18]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-05 16:30:37,334 - mmcls - INFO - Saving checkpoint at 35 epochs
2023-02-05 16:30:39,589 - mmcls - INFO - Epoch(val) [35][18]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-05 16:30:57,910 - mmcls - INFO - Saving checkpoint at 36 epochs
2023-02-05 16:31:00,192 - mmcls - INFO - Epoch(val) [36][18]	accuracy_top-1: 95.4545, accuracy_top-5: 100.0000
2023-02-05 16:31:17,566 - mmcls - INFO - Saving checkpoint at 37 epochs
2023-02-05 16:31:19,822 - mmcls - INFO - Epoch(val) [37][18]	accuracy_top-1: 95.4545, accuracy_top-5: 100.0000
2023-02-05 16:31:37,223 - mmcls - INFO - Saving checkpoint at 38 epochs
2023-02-05 16:31:39,461 - mmcls - INFO - Epoch(val) [38][18]	accuracy_top-1: 95.4545, accuracy_top-5: 100.0000
2023-02-05 16:31:56,838 - mmcls - INFO - Saving checkpoint at 39 epochs
2023-02-05 16:31:59,077 - mmcls - INFO - Epoch(val) [39][18]	accuracy_top-1: 95.4545, accuracy_top-5: 100.0000
2023-02-05 16:32:16,453 - mmcls - INFO - Saving checkpoint at 40 epochs
2023-02-05 16:32:18,727 - mmcls - INFO - Epoch(val) [40][18]	accuracy_top-1: 95.4545, accuracy_top-5: 100.0000
2023-02-05 16:32:36,126 - mmcls - INFO - Saving checkpoint at 41 epochs
2023-02-05 16:32:38,398 - mmcls - INFO - Epoch(val) [41][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-05 16:32:55,761 - mmcls - INFO - Saving checkpoint at 42 epochs
2023-02-05 16:32:58,057 - mmcls - INFO - Epoch(val) [42][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-05 16:33:15,420 - mmcls - INFO - Saving checkpoint at 43 epochs
2023-02-05 16:33:17,687 - mmcls - INFO - Epoch(val) [43][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-05 16:33:35,061 - mmcls - INFO - Saving checkpoint at 44 epochs
2023-02-05 16:33:37,307 - mmcls - INFO - Epoch(val) [44][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-05 16:33:55,005 - mmcls - INFO - Saving checkpoint at 45 epochs
2023-02-05 16:33:57,319 - mmcls - INFO - Epoch(val) [45][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-05 16:34:15,042 - mmcls - INFO - Saving checkpoint at 46 epochs
2023-02-05 16:34:17,340 - mmcls - INFO - Epoch(val) [46][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-05 16:34:35,603 - mmcls - INFO - Saving checkpoint at 47 epochs
2023-02-05 16:34:38,011 - mmcls - INFO - Epoch(val) [47][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-05 16:34:55,888 - mmcls - INFO - Saving checkpoint at 48 epochs
2023-02-05 16:34:58,240 - mmcls - INFO - Epoch(val) [48][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-05 16:35:16,388 - mmcls - INFO - Saving checkpoint at 49 epochs
2023-02-05 16:35:18,727 - mmcls - INFO - Epoch(val) [49][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-05 16:35:36,226 - mmcls - INFO - Saving checkpoint at 50 epochs
2023-02-05 16:35:38,516 - mmcls - INFO - Epoch(val) [50][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-05 16:35:56,186 - mmcls - INFO - Saving checkpoint at 51 epochs
2023-02-05 16:35:58,528 - mmcls - INFO - Epoch(val) [51][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-05 16:36:16,433 - mmcls - INFO - Saving checkpoint at 52 epochs
2023-02-05 16:36:18,905 - mmcls - INFO - Epoch(val) [52][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-05 16:36:36,602 - mmcls - INFO - Saving checkpoint at 53 epochs
2023-02-05 16:36:38,964 - mmcls - INFO - Epoch(val) [53][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-05 16:36:56,361 - mmcls - INFO - Saving checkpoint at 54 epochs
2023-02-05 16:36:58,671 - mmcls - INFO - Epoch(val) [54][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-05 16:37:16,773 - mmcls - INFO - Saving checkpoint at 55 epochs
2023-02-05 16:37:19,085 - mmcls - INFO - Epoch(val) [55][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-05 16:37:36,555 - mmcls - INFO - Saving checkpoint at 56 epochs
2023-02-05 16:37:39,085 - mmcls - INFO - Epoch(val) [56][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-05 16:37:56,534 - mmcls - INFO - Saving checkpoint at 57 epochs
2023-02-05 16:37:59,175 - mmcls - INFO - Epoch(val) [57][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-05 16:38:16,595 - mmcls - INFO - Saving checkpoint at 58 epochs
2023-02-05 16:38:18,961 - mmcls - INFO - Epoch(val) [58][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-05 16:38:36,526 - mmcls - INFO - Saving checkpoint at 59 epochs
2023-02-05 16:38:38,830 - mmcls - INFO - Epoch(val) [59][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-05 16:38:56,324 - mmcls - INFO - Saving checkpoint at 60 epochs
2023-02-05 16:38:58,972 - mmcls - INFO - Epoch(val) [60][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-05 16:39:17,109 - mmcls - INFO - Saving checkpoint at 61 epochs
2023-02-05 16:39:19,446 - mmcls - INFO - Epoch(val) [61][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-05 16:39:36,888 - mmcls - INFO - Saving checkpoint at 62 epochs
2023-02-05 16:39:39,235 - mmcls - INFO - Epoch(val) [62][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-05 16:39:56,772 - mmcls - INFO - Saving checkpoint at 63 epochs
2023-02-05 16:39:59,104 - mmcls - INFO - Epoch(val) [63][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-05 16:40:16,538 - mmcls - INFO - Saving checkpoint at 64 epochs
2023-02-05 16:40:18,858 - mmcls - INFO - Epoch(val) [64][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-05 16:40:36,637 - mmcls - INFO - Saving checkpoint at 65 epochs
2023-02-05 16:40:39,039 - mmcls - INFO - Epoch(val) [65][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-05 16:40:56,503 - mmcls - INFO - Saving checkpoint at 66 epochs
2023-02-05 16:40:58,803 - mmcls - INFO - Epoch(val) [66][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-05 16:41:16,368 - mmcls - INFO - Saving checkpoint at 67 epochs
2023-02-05 16:41:18,703 - mmcls - INFO - Epoch(val) [67][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-05 16:41:36,191 - mmcls - INFO - Saving checkpoint at 68 epochs
2023-02-05 16:41:38,483 - mmcls - INFO - Epoch(val) [68][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-05 16:41:56,048 - mmcls - INFO - Saving checkpoint at 69 epochs
2023-02-05 16:41:58,395 - mmcls - INFO - Epoch(val) [69][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-05 16:42:16,123 - mmcls - INFO - Saving checkpoint at 70 epochs
2023-02-05 16:42:18,423 - mmcls - INFO - Epoch(val) [70][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-05 16:42:36,343 - mmcls - INFO - Saving checkpoint at 71 epochs
2023-02-05 16:42:38,591 - mmcls - INFO - Epoch(val) [71][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-05 16:42:56,149 - mmcls - INFO - Saving checkpoint at 72 epochs
2023-02-05 16:42:58,417 - mmcls - INFO - Epoch(val) [72][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-05 16:43:16,397 - mmcls - INFO - Saving checkpoint at 73 epochs
2023-02-05 16:43:18,651 - mmcls - INFO - Epoch(val) [73][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-05 16:43:36,259 - mmcls - INFO - Saving checkpoint at 74 epochs
2023-02-05 16:43:38,599 - mmcls - INFO - Epoch(val) [74][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-05 16:43:56,927 - mmcls - INFO - Saving checkpoint at 75 epochs
2023-02-05 16:43:59,363 - mmcls - INFO - Epoch(val) [75][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-05 16:44:17,711 - mmcls - INFO - Saving checkpoint at 76 epochs
2023-02-05 16:44:20,130 - mmcls - INFO - Epoch(val) [76][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-05 16:44:37,981 - mmcls - INFO - Saving checkpoint at 77 epochs
2023-02-05 16:44:40,355 - mmcls - INFO - Epoch(val) [77][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-05 16:44:58,513 - mmcls - INFO - Saving checkpoint at 78 epochs
2023-02-05 16:45:00,790 - mmcls - INFO - Epoch(val) [78][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-05 16:45:18,492 - mmcls - INFO - Saving checkpoint at 79 epochs
2023-02-05 16:45:20,805 - mmcls - INFO - Epoch(val) [79][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-05 16:45:38,854 - mmcls - INFO - Saving checkpoint at 80 epochs
2023-02-05 16:45:41,139 - mmcls - INFO - Epoch(val) [80][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-05 16:45:58,724 - mmcls - INFO - Saving checkpoint at 81 epochs
2023-02-05 16:46:01,068 - mmcls - INFO - Epoch(val) [81][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-05 16:46:18,989 - mmcls - INFO - Saving checkpoint at 82 epochs
2023-02-05 16:46:21,331 - mmcls - INFO - Epoch(val) [82][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-05 16:46:38,759 - mmcls - INFO - Saving checkpoint at 83 epochs
2023-02-05 16:46:41,107 - mmcls - INFO - Epoch(val) [83][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-05 16:46:58,711 - mmcls - INFO - Saving checkpoint at 84 epochs
2023-02-05 16:47:01,026 - mmcls - INFO - Epoch(val) [84][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-05 16:47:18,455 - mmcls - INFO - Saving checkpoint at 85 epochs
2023-02-05 16:47:20,773 - mmcls - INFO - Epoch(val) [85][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-05 16:47:38,188 - mmcls - INFO - Saving checkpoint at 86 epochs
2023-02-05 16:47:40,470 - mmcls - INFO - Epoch(val) [86][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-05 16:47:58,601 - mmcls - INFO - Saving checkpoint at 87 epochs
2023-02-05 16:48:00,924 - mmcls - INFO - Epoch(val) [87][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-05 16:48:18,451 - mmcls - INFO - Saving checkpoint at 88 epochs
2023-02-05 16:48:20,756 - mmcls - INFO - Epoch(val) [88][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-05 16:48:38,404 - mmcls - INFO - Saving checkpoint at 89 epochs
2023-02-05 16:48:40,723 - mmcls - INFO - Epoch(val) [89][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-05 16:48:58,343 - mmcls - INFO - Saving checkpoint at 90 epochs
2023-02-05 16:49:00,629 - mmcls - INFO - Epoch(val) [90][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
2023-02-05 16:49:18,289 - mmcls - INFO - Saving checkpoint at 91 epochs
2023-02-05 16:49:20,555 - mmcls - INFO - Epoch(val) [91][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
2023-02-05 16:49:38,248 - mmcls - INFO - Saving checkpoint at 92 epochs
2023-02-05 16:49:40,560 - mmcls - INFO - Epoch(val) [92][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
2023-02-05 16:49:58,409 - mmcls - INFO - Saving checkpoint at 93 epochs
2023-02-05 16:50:00,898 - mmcls - INFO - Epoch(val) [93][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
2023-02-05 16:50:18,624 - mmcls - INFO - Saving checkpoint at 94 epochs
2023-02-05 16:50:20,880 - mmcls - INFO - Epoch(val) [94][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
2023-02-05 16:50:38,347 - mmcls - INFO - Saving checkpoint at 95 epochs
2023-02-05 16:50:40,617 - mmcls - INFO - Epoch(val) [95][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
2023-02-05 16:50:58,566 - mmcls - INFO - Saving checkpoint at 96 epochs
2023-02-05 16:51:00,923 - mmcls - INFO - Epoch(val) [96][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
2023-02-05 16:51:19,430 - mmcls - INFO - Saving checkpoint at 97 epochs
2023-02-05 16:51:21,829 - mmcls - INFO - Epoch(val) [97][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
2023-02-05 16:51:39,748 - mmcls - INFO - Saving checkpoint at 98 epochs
2023-02-05 16:51:42,104 - mmcls - INFO - Epoch(val) [98][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
2023-02-05 16:52:00,225 - mmcls - INFO - Saving checkpoint at 99 epochs
2023-02-05 16:52:02,605 - mmcls - INFO - Epoch(val) [99][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
2023-02-05 16:52:20,456 - mmcls - INFO - Saving checkpoint at 100 epochs
2023-02-05 16:52:22,715 - mmcls - INFO - Epoch(val) [100][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
