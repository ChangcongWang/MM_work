2023-02-05 22:06:04,884 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.9.7 (default, Sep 16 2021, 13:09:58) [GCC 7.5.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 3070 Laptop GPU
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.6, V11.6.124
GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
PyTorch: 1.11.0
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.12.0
OpenCV: 4.6.0
MMCV: 1.6.0
MMCV Compiler: GCC 9.3
MMCV CUDA Compiler: 11.3
MMClassification: 0.25.0+
------------------------------------------------------------

2023-02-05 22:06:04,884 - mmcls - INFO - Distributed training: False
2023-02-05 22:06:04,950 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(type='MobileNetV2', widen_factor=1.0),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=5,
        in_channels=1280,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=1))
dataset_type = 'Flower'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
data = dict(
    samples_per_gpu=32,
    workers_per_gpu=2,
    train=dict(
        type='CustomDataset',
        data_prefix='data/flower_dataset/train',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224, backend='pillow'),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ]),
    val=dict(
        type='CustomDataset',
        data_prefix='data/flower_dataset/val',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1), backend='pillow'),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]),
    test=dict(
        type='CustomDataset',
        data_prefix='data/flower_dataset/val',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1), backend='pillow'),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(interval=1, metric='accuracy')
optimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=4e-05)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', gamma=0.98, step=1)
runner = dict(type='EpochBasedRunner', max_epochs=100)
checkpoint_config = dict(interval=1)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = 'mobilenet_v2_batch256_imagenet_20200708-3b2dc3af.pth'
resume_from = None
workflow = [('train', 1)]
work_dir = './work_dirs/mobilenet-v2_8xb32_in1k'
gpu_ids = range(0, 1)

2023-02-05 22:06:04,950 - mmcls - INFO - Set random seed to 2063221386, deterministic: False
2023-02-05 22:06:04,986 - mmcls - INFO - initialize MobileNetV2 with init_cfg [{'type': 'Kaiming', 'layer': ['Conv2d']}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2023-02-05 22:06:05,004 - mmcls - INFO - initialize LinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
Name of parameter - Initialization information

backbone.conv1.conv.weight - torch.Size([32, 3, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.conv1.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.conv1.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv.0.conv.weight - torch.Size([32, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.conv.0.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv.0.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv.1.conv.weight - torch.Size([16, 32, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.conv.1.bn.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv.1.bn.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv.0.conv.weight - torch.Size([96, 16, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.conv.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv.1.conv.weight - torch.Size([96, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.conv.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv.2.conv.weight - torch.Size([24, 96, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.conv.2.bn.weight - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv.2.bn.bias - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv.0.conv.weight - torch.Size([144, 24, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.conv.0.bn.weight - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv.0.bn.bias - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv.1.conv.weight - torch.Size([144, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.conv.1.bn.weight - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv.1.bn.bias - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv.2.conv.weight - torch.Size([24, 144, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.conv.2.bn.weight - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv.2.bn.bias - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv.0.conv.weight - torch.Size([144, 24, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.conv.0.bn.weight - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv.0.bn.bias - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv.1.conv.weight - torch.Size([144, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.conv.1.bn.weight - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv.1.bn.bias - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv.2.conv.weight - torch.Size([32, 144, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.conv.2.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv.2.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv.0.conv.weight - torch.Size([192, 32, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.conv.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv.1.conv.weight - torch.Size([192, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.conv.1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv.1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv.2.conv.weight - torch.Size([32, 192, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.conv.2.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv.2.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv.0.conv.weight - torch.Size([192, 32, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.conv.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv.1.conv.weight - torch.Size([192, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.conv.1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv.1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv.2.conv.weight - torch.Size([32, 192, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.conv.2.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv.2.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv.0.conv.weight - torch.Size([192, 32, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.conv.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv.1.conv.weight - torch.Size([192, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.conv.1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv.1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv.2.conv.weight - torch.Size([64, 192, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.conv.2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv.2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv.0.conv.weight - torch.Size([384, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.conv.0.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv.0.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv.1.conv.weight - torch.Size([384, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.conv.1.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv.1.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv.2.conv.weight - torch.Size([64, 384, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.conv.2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv.2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv.0.conv.weight - torch.Size([384, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.conv.0.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv.0.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv.1.conv.weight - torch.Size([384, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.conv.1.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv.1.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv.2.conv.weight - torch.Size([64, 384, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.conv.2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv.2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.3.conv.0.conv.weight - torch.Size([384, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.3.conv.0.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.3.conv.0.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.3.conv.1.conv.weight - torch.Size([384, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.3.conv.1.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.3.conv.1.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.3.conv.2.conv.weight - torch.Size([64, 384, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.3.conv.2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.3.conv.2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.0.conv.0.conv.weight - torch.Size([384, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer5.0.conv.0.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.0.conv.0.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.0.conv.1.conv.weight - torch.Size([384, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer5.0.conv.1.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.0.conv.1.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.0.conv.2.conv.weight - torch.Size([96, 384, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer5.0.conv.2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.0.conv.2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.1.conv.0.conv.weight - torch.Size([576, 96, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer5.1.conv.0.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.1.conv.0.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.1.conv.1.conv.weight - torch.Size([576, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer5.1.conv.1.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.1.conv.1.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.1.conv.2.conv.weight - torch.Size([96, 576, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer5.1.conv.2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.1.conv.2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.2.conv.0.conv.weight - torch.Size([576, 96, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer5.2.conv.0.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.2.conv.0.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.2.conv.1.conv.weight - torch.Size([576, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer5.2.conv.1.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.2.conv.1.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.2.conv.2.conv.weight - torch.Size([96, 576, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer5.2.conv.2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.2.conv.2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.0.conv.0.conv.weight - torch.Size([576, 96, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer6.0.conv.0.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.0.conv.0.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.0.conv.1.conv.weight - torch.Size([576, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer6.0.conv.1.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.0.conv.1.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.0.conv.2.conv.weight - torch.Size([160, 576, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer6.0.conv.2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.0.conv.2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.1.conv.0.conv.weight - torch.Size([960, 160, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer6.1.conv.0.bn.weight - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.1.conv.0.bn.bias - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.1.conv.1.conv.weight - torch.Size([960, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer6.1.conv.1.bn.weight - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.1.conv.1.bn.bias - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.1.conv.2.conv.weight - torch.Size([160, 960, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer6.1.conv.2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.1.conv.2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.2.conv.0.conv.weight - torch.Size([960, 160, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer6.2.conv.0.bn.weight - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.2.conv.0.bn.bias - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.2.conv.1.conv.weight - torch.Size([960, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer6.2.conv.1.bn.weight - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.2.conv.1.bn.bias - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.2.conv.2.conv.weight - torch.Size([160, 960, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer6.2.conv.2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.2.conv.2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.0.conv.0.conv.weight - torch.Size([960, 160, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer7.0.conv.0.bn.weight - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.0.conv.0.bn.bias - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.0.conv.1.conv.weight - torch.Size([960, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer7.0.conv.1.bn.weight - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.0.conv.1.bn.bias - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.0.conv.2.conv.weight - torch.Size([320, 960, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer7.0.conv.2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.0.conv.2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.conv2.conv.weight - torch.Size([1280, 320, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.conv2.bn.weight - torch.Size([1280]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.conv2.bn.bias - torch.Size([1280]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([5, 1280]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 
2023-02-05 22:06:08,115 - mmcls - INFO - load checkpoint from local path: mobilenet_v2_batch256_imagenet_20200708-3b2dc3af.pth
2023-02-05 22:06:08,151 - mmcls - WARNING - The model and loaded state dict do not match exactly

size mismatch for head.fc.weight: copying a param with shape torch.Size([1000, 1280]) from checkpoint, the shape in current model is torch.Size([5, 1280]).
size mismatch for head.fc.bias: copying a param with shape torch.Size([1000]) from checkpoint, the shape in current model is torch.Size([5]).
2023-02-05 22:06:08,152 - mmcls - INFO - Start running, host: sucro@sucro, work_dir: /home/sucro/wcc/mmlab/mmcls_base_work/work_dirs/mobilenet-v2_8xb32_in1k
2023-02-05 22:06:08,152 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-05 22:06:08,152 - mmcls - INFO - workflow: [('train', 1)], max: 100 epochs
2023-02-05 22:06:08,152 - mmcls - INFO - Checkpoints will be saved to /home/sucro/wcc/mmlab/mmcls_base_work/work_dirs/mobilenet-v2_8xb32_in1k by HardDiskBackend.
2023-02-05 22:06:16,349 - mmcls - INFO - Saving checkpoint at 1 epochs
2023-02-05 22:06:17,574 - mmcls - INFO - Epoch(val) [1][18]	accuracy_top-1: 93.0070, accuracy_top-5: 100.0000
2023-02-05 22:06:24,568 - mmcls - INFO - Saving checkpoint at 2 epochs
2023-02-05 22:06:25,581 - mmcls - INFO - Epoch(val) [2][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-05 22:06:32,577 - mmcls - INFO - Saving checkpoint at 3 epochs
2023-02-05 22:06:33,572 - mmcls - INFO - Epoch(val) [3][18]	accuracy_top-1: 95.4545, accuracy_top-5: 100.0000
2023-02-05 22:06:40,530 - mmcls - INFO - Saving checkpoint at 4 epochs
2023-02-05 22:06:41,531 - mmcls - INFO - Epoch(val) [4][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-05 22:06:48,502 - mmcls - INFO - Saving checkpoint at 5 epochs
2023-02-05 22:06:49,514 - mmcls - INFO - Epoch(val) [5][18]	accuracy_top-1: 95.4545, accuracy_top-5: 100.0000
2023-02-05 22:06:56,704 - mmcls - INFO - Saving checkpoint at 6 epochs
2023-02-05 22:06:57,807 - mmcls - INFO - Epoch(val) [6][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-05 22:07:04,920 - mmcls - INFO - Saving checkpoint at 7 epochs
2023-02-05 22:07:05,909 - mmcls - INFO - Epoch(val) [7][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
2023-02-05 22:07:12,969 - mmcls - INFO - Saving checkpoint at 8 epochs
2023-02-05 22:07:13,966 - mmcls - INFO - Epoch(val) [8][18]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-05 22:07:21,032 - mmcls - INFO - Saving checkpoint at 9 epochs
2023-02-05 22:07:22,051 - mmcls - INFO - Epoch(val) [9][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-05 22:07:29,139 - mmcls - INFO - Saving checkpoint at 10 epochs
2023-02-05 22:07:30,162 - mmcls - INFO - Epoch(val) [10][18]	accuracy_top-1: 95.4545, accuracy_top-5: 100.0000
2023-02-05 22:07:37,225 - mmcls - INFO - Saving checkpoint at 11 epochs
2023-02-05 22:07:38,234 - mmcls - INFO - Epoch(val) [11][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-05 22:07:45,345 - mmcls - INFO - Saving checkpoint at 12 epochs
2023-02-05 22:07:46,349 - mmcls - INFO - Epoch(val) [12][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-05 22:07:53,414 - mmcls - INFO - Saving checkpoint at 13 epochs
2023-02-05 22:07:54,413 - mmcls - INFO - Epoch(val) [13][18]	accuracy_top-1: 97.0280, accuracy_top-5: 100.0000
2023-02-05 22:08:01,468 - mmcls - INFO - Saving checkpoint at 14 epochs
2023-02-05 22:08:02,448 - mmcls - INFO - Epoch(val) [14][18]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-05 22:08:09,492 - mmcls - INFO - Saving checkpoint at 15 epochs
2023-02-05 22:08:10,499 - mmcls - INFO - Epoch(val) [15][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-05 22:08:17,524 - mmcls - INFO - Saving checkpoint at 16 epochs
2023-02-05 22:08:18,541 - mmcls - INFO - Epoch(val) [16][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-05 22:08:25,716 - mmcls - INFO - Saving checkpoint at 17 epochs
2023-02-05 22:08:26,766 - mmcls - INFO - Epoch(val) [17][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-05 22:08:33,799 - mmcls - INFO - Saving checkpoint at 18 epochs
2023-02-05 22:08:34,800 - mmcls - INFO - Epoch(val) [18][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-05 22:08:41,908 - mmcls - INFO - Saving checkpoint at 19 epochs
2023-02-05 22:08:42,944 - mmcls - INFO - Epoch(val) [19][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-05 22:08:49,998 - mmcls - INFO - Saving checkpoint at 20 epochs
2023-02-05 22:08:50,999 - mmcls - INFO - Epoch(val) [20][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-05 22:08:58,081 - mmcls - INFO - Saving checkpoint at 21 epochs
2023-02-05 22:08:59,089 - mmcls - INFO - Epoch(val) [21][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-05 22:09:06,158 - mmcls - INFO - Saving checkpoint at 22 epochs
2023-02-05 22:09:07,158 - mmcls - INFO - Epoch(val) [22][18]	accuracy_top-1: 96.6783, accuracy_top-5: 100.0000
2023-02-05 22:09:14,228 - mmcls - INFO - Saving checkpoint at 23 epochs
2023-02-05 22:09:15,223 - mmcls - INFO - Epoch(val) [23][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-05 22:09:22,296 - mmcls - INFO - Saving checkpoint at 24 epochs
2023-02-05 22:09:23,325 - mmcls - INFO - Epoch(val) [24][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-05 22:09:30,408 - mmcls - INFO - Saving checkpoint at 25 epochs
2023-02-05 22:09:31,459 - mmcls - INFO - Epoch(val) [25][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
2023-02-05 22:09:38,547 - mmcls - INFO - Saving checkpoint at 26 epochs
2023-02-05 22:09:39,541 - mmcls - INFO - Epoch(val) [26][18]	accuracy_top-1: 97.0280, accuracy_top-5: 100.0000
2023-02-05 22:09:46,914 - mmcls - INFO - Saving checkpoint at 27 epochs
2023-02-05 22:09:47,924 - mmcls - INFO - Epoch(val) [27][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
2023-02-05 22:09:55,193 - mmcls - INFO - Saving checkpoint at 28 epochs
2023-02-05 22:09:56,204 - mmcls - INFO - Epoch(val) [28][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-05 22:10:03,335 - mmcls - INFO - Saving checkpoint at 29 epochs
2023-02-05 22:10:04,361 - mmcls - INFO - Epoch(val) [29][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-05 22:10:11,409 - mmcls - INFO - Saving checkpoint at 30 epochs
2023-02-05 22:10:12,436 - mmcls - INFO - Epoch(val) [30][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-05 22:10:19,583 - mmcls - INFO - Saving checkpoint at 31 epochs
2023-02-05 22:10:20,614 - mmcls - INFO - Epoch(val) [31][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-05 22:10:27,802 - mmcls - INFO - Saving checkpoint at 32 epochs
2023-02-05 22:10:28,789 - mmcls - INFO - Epoch(val) [32][18]	accuracy_top-1: 96.6783, accuracy_top-5: 100.0000
2023-02-05 22:10:35,862 - mmcls - INFO - Saving checkpoint at 33 epochs
2023-02-05 22:10:36,912 - mmcls - INFO - Epoch(val) [33][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
2023-02-05 22:10:44,075 - mmcls - INFO - Saving checkpoint at 34 epochs
2023-02-05 22:10:45,101 - mmcls - INFO - Epoch(val) [34][18]	accuracy_top-1: 96.5035, accuracy_top-5: 100.0000
2023-02-05 22:10:52,292 - mmcls - INFO - Saving checkpoint at 35 epochs
2023-02-05 22:10:53,295 - mmcls - INFO - Epoch(val) [35][18]	accuracy_top-1: 96.8531, accuracy_top-5: 100.0000
2023-02-05 22:11:00,457 - mmcls - INFO - Saving checkpoint at 36 epochs
2023-02-05 22:11:01,546 - mmcls - INFO - Epoch(val) [36][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-05 22:11:08,781 - mmcls - INFO - Saving checkpoint at 37 epochs
2023-02-05 22:11:09,833 - mmcls - INFO - Epoch(val) [37][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-05 22:11:16,873 - mmcls - INFO - Saving checkpoint at 38 epochs
2023-02-05 22:11:17,887 - mmcls - INFO - Epoch(val) [38][18]	accuracy_top-1: 96.6783, accuracy_top-5: 100.0000
2023-02-05 22:11:24,906 - mmcls - INFO - Saving checkpoint at 39 epochs
2023-02-05 22:11:25,903 - mmcls - INFO - Epoch(val) [39][18]	accuracy_top-1: 96.5035, accuracy_top-5: 100.0000
2023-02-05 22:11:32,919 - mmcls - INFO - Saving checkpoint at 40 epochs
2023-02-05 22:11:33,918 - mmcls - INFO - Epoch(val) [40][18]	accuracy_top-1: 96.5035, accuracy_top-5: 100.0000
2023-02-05 22:11:40,932 - mmcls - INFO - Saving checkpoint at 41 epochs
2023-02-05 22:11:41,954 - mmcls - INFO - Epoch(val) [41][18]	accuracy_top-1: 96.8531, accuracy_top-5: 100.0000
2023-02-05 22:11:48,958 - mmcls - INFO - Saving checkpoint at 42 epochs
2023-02-05 22:11:49,975 - mmcls - INFO - Epoch(val) [42][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-05 22:11:57,016 - mmcls - INFO - Saving checkpoint at 43 epochs
2023-02-05 22:11:58,038 - mmcls - INFO - Epoch(val) [43][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
2023-02-05 22:12:05,049 - mmcls - INFO - Saving checkpoint at 44 epochs
2023-02-05 22:12:06,075 - mmcls - INFO - Epoch(val) [44][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
2023-02-05 22:12:13,081 - mmcls - INFO - Saving checkpoint at 45 epochs
2023-02-05 22:12:14,132 - mmcls - INFO - Epoch(val) [45][18]	accuracy_top-1: 97.2028, accuracy_top-5: 100.0000
2023-02-05 22:12:21,155 - mmcls - INFO - Saving checkpoint at 46 epochs
2023-02-05 22:12:22,180 - mmcls - INFO - Epoch(val) [46][18]	accuracy_top-1: 97.0280, accuracy_top-5: 100.0000
2023-02-05 22:12:29,290 - mmcls - INFO - Saving checkpoint at 47 epochs
2023-02-05 22:12:30,346 - mmcls - INFO - Epoch(val) [47][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
2023-02-05 22:12:37,596 - mmcls - INFO - Saving checkpoint at 48 epochs
2023-02-05 22:12:38,656 - mmcls - INFO - Epoch(val) [48][18]	accuracy_top-1: 96.6783, accuracy_top-5: 100.0000
2023-02-05 22:12:45,845 - mmcls - INFO - Saving checkpoint at 49 epochs
2023-02-05 22:12:46,896 - mmcls - INFO - Epoch(val) [49][18]	accuracy_top-1: 96.5035, accuracy_top-5: 100.0000
2023-02-05 22:12:54,239 - mmcls - INFO - Saving checkpoint at 50 epochs
2023-02-05 22:12:55,337 - mmcls - INFO - Epoch(val) [50][18]	accuracy_top-1: 96.6783, accuracy_top-5: 100.0000
2023-02-05 22:13:02,420 - mmcls - INFO - Saving checkpoint at 51 epochs
2023-02-05 22:13:03,439 - mmcls - INFO - Epoch(val) [51][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
2023-02-05 22:13:10,507 - mmcls - INFO - Saving checkpoint at 52 epochs
2023-02-05 22:13:11,532 - mmcls - INFO - Epoch(val) [52][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-05 22:13:18,683 - mmcls - INFO - Saving checkpoint at 53 epochs
2023-02-05 22:13:19,777 - mmcls - INFO - Epoch(val) [53][18]	accuracy_top-1: 96.6783, accuracy_top-5: 100.0000
2023-02-05 22:13:27,026 - mmcls - INFO - Saving checkpoint at 54 epochs
2023-02-05 22:13:28,081 - mmcls - INFO - Epoch(val) [54][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
2023-02-05 22:13:35,210 - mmcls - INFO - Saving checkpoint at 55 epochs
2023-02-05 22:13:36,257 - mmcls - INFO - Epoch(val) [55][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-05 22:13:43,404 - mmcls - INFO - Saving checkpoint at 56 epochs
2023-02-05 22:13:44,437 - mmcls - INFO - Epoch(val) [56][18]	accuracy_top-1: 96.8531, accuracy_top-5: 100.0000
2023-02-05 22:13:52,056 - mmcls - INFO - Saving checkpoint at 57 epochs
2023-02-05 22:13:53,104 - mmcls - INFO - Epoch(val) [57][18]	accuracy_top-1: 96.6783, accuracy_top-5: 100.0000
2023-02-05 22:14:00,686 - mmcls - INFO - Saving checkpoint at 58 epochs
2023-02-05 22:14:01,738 - mmcls - INFO - Epoch(val) [58][18]	accuracy_top-1: 96.5035, accuracy_top-5: 100.0000
2023-02-05 22:14:09,396 - mmcls - INFO - Saving checkpoint at 59 epochs
2023-02-05 22:14:10,472 - mmcls - INFO - Epoch(val) [59][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-05 22:14:18,113 - mmcls - INFO - Saving checkpoint at 60 epochs
2023-02-05 22:14:19,171 - mmcls - INFO - Epoch(val) [60][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
2023-02-05 22:14:26,779 - mmcls - INFO - Saving checkpoint at 61 epochs
2023-02-05 22:14:27,859 - mmcls - INFO - Epoch(val) [61][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
2023-02-05 22:14:35,445 - mmcls - INFO - Saving checkpoint at 62 epochs
2023-02-05 22:14:36,533 - mmcls - INFO - Epoch(val) [62][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-05 22:14:43,973 - mmcls - INFO - Saving checkpoint at 63 epochs
2023-02-05 22:14:45,033 - mmcls - INFO - Epoch(val) [63][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-05 22:14:52,716 - mmcls - INFO - Saving checkpoint at 64 epochs
2023-02-05 22:14:53,777 - mmcls - INFO - Epoch(val) [64][18]	accuracy_top-1: 95.9790, accuracy_top-5: 100.0000
2023-02-05 22:15:01,197 - mmcls - INFO - Saving checkpoint at 65 epochs
2023-02-05 22:15:02,269 - mmcls - INFO - Epoch(val) [65][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-05 22:15:09,677 - mmcls - INFO - Saving checkpoint at 66 epochs
2023-02-05 22:15:10,765 - mmcls - INFO - Epoch(val) [66][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-05 22:15:18,196 - mmcls - INFO - Saving checkpoint at 67 epochs
2023-02-05 22:15:19,282 - mmcls - INFO - Epoch(val) [67][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
2023-02-05 22:15:26,965 - mmcls - INFO - Saving checkpoint at 68 epochs
2023-02-05 22:15:28,035 - mmcls - INFO - Epoch(val) [68][18]	accuracy_top-1: 96.6783, accuracy_top-5: 100.0000
2023-02-05 22:15:35,651 - mmcls - INFO - Saving checkpoint at 69 epochs
2023-02-05 22:15:36,753 - mmcls - INFO - Epoch(val) [69][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
2023-02-05 22:15:44,438 - mmcls - INFO - Saving checkpoint at 70 epochs
2023-02-05 22:15:45,543 - mmcls - INFO - Epoch(val) [70][18]	accuracy_top-1: 96.6783, accuracy_top-5: 100.0000
2023-02-05 22:15:52,999 - mmcls - INFO - Saving checkpoint at 71 epochs
2023-02-05 22:15:54,071 - mmcls - INFO - Epoch(val) [71][18]	accuracy_top-1: 97.0280, accuracy_top-5: 100.0000
2023-02-05 22:16:01,430 - mmcls - INFO - Saving checkpoint at 72 epochs
2023-02-05 22:16:02,495 - mmcls - INFO - Epoch(val) [72][18]	accuracy_top-1: 96.5035, accuracy_top-5: 100.0000
2023-02-05 22:16:10,183 - mmcls - INFO - Saving checkpoint at 73 epochs
2023-02-05 22:16:11,287 - mmcls - INFO - Epoch(val) [73][18]	accuracy_top-1: 96.6783, accuracy_top-5: 100.0000
2023-02-05 22:16:18,967 - mmcls - INFO - Saving checkpoint at 74 epochs
2023-02-05 22:16:20,020 - mmcls - INFO - Epoch(val) [74][18]	accuracy_top-1: 96.5035, accuracy_top-5: 100.0000
2023-02-05 22:16:27,752 - mmcls - INFO - Saving checkpoint at 75 epochs
2023-02-05 22:16:28,835 - mmcls - INFO - Epoch(val) [75][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-05 22:16:36,532 - mmcls - INFO - Saving checkpoint at 76 epochs
2023-02-05 22:16:37,638 - mmcls - INFO - Epoch(val) [76][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-05 22:16:45,309 - mmcls - INFO - Saving checkpoint at 77 epochs
2023-02-05 22:16:46,369 - mmcls - INFO - Epoch(val) [77][18]	accuracy_top-1: 96.6783, accuracy_top-5: 100.0000
2023-02-05 22:16:54,038 - mmcls - INFO - Saving checkpoint at 78 epochs
2023-02-05 22:16:55,112 - mmcls - INFO - Epoch(val) [78][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-05 22:17:02,812 - mmcls - INFO - Saving checkpoint at 79 epochs
2023-02-05 22:17:03,883 - mmcls - INFO - Epoch(val) [79][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
2023-02-05 22:17:11,660 - mmcls - INFO - Saving checkpoint at 80 epochs
2023-02-05 22:17:12,718 - mmcls - INFO - Epoch(val) [80][18]	accuracy_top-1: 95.8042, accuracy_top-5: 100.0000
2023-02-05 22:17:20,414 - mmcls - INFO - Saving checkpoint at 81 epochs
2023-02-05 22:17:21,509 - mmcls - INFO - Epoch(val) [81][18]	accuracy_top-1: 96.5035, accuracy_top-5: 100.0000
2023-02-05 22:17:29,217 - mmcls - INFO - Saving checkpoint at 82 epochs
2023-02-05 22:17:30,264 - mmcls - INFO - Epoch(val) [82][18]	accuracy_top-1: 96.6783, accuracy_top-5: 100.0000
2023-02-05 22:17:38,079 - mmcls - INFO - Saving checkpoint at 83 epochs
2023-02-05 22:17:39,163 - mmcls - INFO - Epoch(val) [83][18]	accuracy_top-1: 96.8531, accuracy_top-5: 100.0000
2023-02-05 22:17:46,892 - mmcls - INFO - Saving checkpoint at 84 epochs
2023-02-05 22:17:47,958 - mmcls - INFO - Epoch(val) [84][18]	accuracy_top-1: 96.5035, accuracy_top-5: 100.0000
2023-02-05 22:17:55,708 - mmcls - INFO - Saving checkpoint at 85 epochs
2023-02-05 22:17:56,761 - mmcls - INFO - Epoch(val) [85][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
2023-02-05 22:18:04,465 - mmcls - INFO - Saving checkpoint at 86 epochs
2023-02-05 22:18:05,549 - mmcls - INFO - Epoch(val) [86][18]	accuracy_top-1: 96.1538, accuracy_top-5: 100.0000
2023-02-05 22:18:13,200 - mmcls - INFO - Saving checkpoint at 87 epochs
2023-02-05 22:18:14,252 - mmcls - INFO - Epoch(val) [87][18]	accuracy_top-1: 96.8531, accuracy_top-5: 100.0000
2023-02-05 22:18:21,957 - mmcls - INFO - Saving checkpoint at 88 epochs
2023-02-05 22:18:23,026 - mmcls - INFO - Epoch(val) [88][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
2023-02-05 22:18:30,750 - mmcls - INFO - Saving checkpoint at 89 epochs
2023-02-05 22:18:31,802 - mmcls - INFO - Epoch(val) [89][18]	accuracy_top-1: 96.8531, accuracy_top-5: 100.0000
2023-02-05 22:18:39,464 - mmcls - INFO - Saving checkpoint at 90 epochs
2023-02-05 22:18:40,530 - mmcls - INFO - Epoch(val) [90][18]	accuracy_top-1: 96.6783, accuracy_top-5: 100.0000
2023-02-05 22:18:48,213 - mmcls - INFO - Saving checkpoint at 91 epochs
2023-02-05 22:18:49,302 - mmcls - INFO - Epoch(val) [91][18]	accuracy_top-1: 96.6783, accuracy_top-5: 100.0000
2023-02-05 22:18:56,998 - mmcls - INFO - Saving checkpoint at 92 epochs
2023-02-05 22:18:58,090 - mmcls - INFO - Epoch(val) [92][18]	accuracy_top-1: 96.8531, accuracy_top-5: 100.0000
2023-02-05 22:19:05,904 - mmcls - INFO - Saving checkpoint at 93 epochs
2023-02-05 22:19:06,975 - mmcls - INFO - Epoch(val) [93][18]	accuracy_top-1: 96.5035, accuracy_top-5: 100.0000
2023-02-05 22:19:14,666 - mmcls - INFO - Saving checkpoint at 94 epochs
2023-02-05 22:19:15,732 - mmcls - INFO - Epoch(val) [94][18]	accuracy_top-1: 97.0280, accuracy_top-5: 100.0000
2023-02-05 22:19:23,441 - mmcls - INFO - Saving checkpoint at 95 epochs
2023-02-05 22:19:24,566 - mmcls - INFO - Epoch(val) [95][18]	accuracy_top-1: 96.8531, accuracy_top-5: 100.0000
2023-02-05 22:19:32,291 - mmcls - INFO - Saving checkpoint at 96 epochs
2023-02-05 22:19:33,378 - mmcls - INFO - Epoch(val) [96][18]	accuracy_top-1: 96.6783, accuracy_top-5: 100.0000
2023-02-05 22:19:41,060 - mmcls - INFO - Saving checkpoint at 97 epochs
2023-02-05 22:19:42,142 - mmcls - INFO - Epoch(val) [97][18]	accuracy_top-1: 96.8531, accuracy_top-5: 100.0000
2023-02-05 22:19:49,886 - mmcls - INFO - Saving checkpoint at 98 epochs
2023-02-05 22:19:50,967 - mmcls - INFO - Epoch(val) [98][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
2023-02-05 22:19:58,717 - mmcls - INFO - Saving checkpoint at 99 epochs
2023-02-05 22:19:59,768 - mmcls - INFO - Epoch(val) [99][18]	accuracy_top-1: 96.8531, accuracy_top-5: 100.0000
2023-02-05 22:20:07,417 - mmcls - INFO - Saving checkpoint at 100 epochs
2023-02-05 22:20:08,478 - mmcls - INFO - Epoch(val) [100][18]	accuracy_top-1: 96.3287, accuracy_top-5: 100.0000
