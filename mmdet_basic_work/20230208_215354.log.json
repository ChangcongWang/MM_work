{"env_info": "sys.platform: linux\nPython: 3.9.7 (default, Sep 16 2021, 13:09:58) [GCC 7.5.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3070 Laptop GPU\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.6, V11.6.124\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0\nPyTorch: 1.11.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.12.0\nOpenCV: 4.6.0\nMMCV: 1.6.0\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.3\nMMDetection: 2.28.1+c14dd6c", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'mask_rcnn_r50_fpn_mstrain-poly_3x_coco_20210524_201154-21b550bb.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='LoadAnnotations',\n        with_bbox=True,\n        with_mask=True,\n        poly2mask=False),\n    dict(\n        type='Resize',\n        img_scale=[(1333, 640), (1333, 800)],\n        multiscale_mode='range',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=1,\n    workers_per_gpu=1,\n    train=dict(\n        type='RepeatDataset',\n        times=3,\n        dataset=dict(\n            type='CocoDataset',\n            ann_file='data/balloon/train/train_ann.json',\n            img_prefix='data/balloon/train/',\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(\n                    type='LoadAnnotations',\n                    with_bbox=True,\n                    with_mask=True,\n                    poly2mask=False),\n                dict(\n                    type='Resize',\n                    img_scale=[(1333, 640), (1333, 800)],\n                    multiscale_mode='range',\n                    keep_ratio=True),\n                dict(type='RandomFlip', flip_ratio=0.5),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(type='Pad', size_divisor=32),\n                dict(type='DefaultFormatBundle'),\n                dict(\n                    type='Collect',\n                    keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n            ],\n            classes=('balloon', ))),\n    val=dict(\n        type='CocoDataset',\n        ann_file='data/balloon/val/val_ann.json',\n        img_prefix='data/balloon/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )),\n    test=dict(\n        type='CocoDataset',\n        ann_file='data/balloon/val/val_ann.json',\n        img_prefix='data/balloon/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )))\nevaluation = dict(interval=1, metric=['bbox', 'segm'])\noptimizer = dict(type='SGD', lr=0.003, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[9, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\nmodel = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=101,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained',\n                      checkpoint='torchvision://resnet101')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=1,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\nclasses = ('balloon', )\nwork_dir = './work_dirs/mask_rcnn_r101_fpn_mstrain-poly_3x_ballon'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 2018220616, "exp_name": "mask_rcnn_r101_fpn_mstrain-poly_3x_ballon.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0003, "memory": 3075, "data_time": 0.04523, "loss_rpn_cls": 0.09917, "loss_rpn_bbox": 0.01778, "loss_cls": 0.39975, "acc": 85.80469, "loss_bbox": 0.22582, "loss_mask": 1.37044, "loss": 2.11297, "time": 0.28655}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.0006, "memory": 3075, "data_time": 0.00281, "loss_rpn_cls": 0.04534, "loss_rpn_bbox": 0.01938, "loss_cls": 0.24391, "acc": 90.76562, "loss_bbox": 0.32184, "loss_mask": 0.22632, "loss": 0.85678, "time": 0.22771}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.0009, "memory": 3075, "data_time": 0.00295, "loss_rpn_cls": 0.02525, "loss_rpn_bbox": 0.01847, "loss_cls": 0.13562, "acc": 94.07422, "loss_bbox": 0.28492, "loss_mask": 0.12015, "loss": 0.5844, "time": 0.23507}
{"mode": "val", "epoch": 1, "iter": 13, "lr": 0.00109, "bbox_mAP": 0.6624, "bbox_mAP_50": 0.8322, "bbox_mAP_75": 0.8067, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.5795, "bbox_mAP_l": 0.7207, "bbox_mAP_copypaste": "0.6624 0.8322 0.8067 0.0000 0.5795 0.7207", "segm_mAP": 0.678, "segm_mAP_50": 0.8215, "segm_mAP_75": 0.8215, "segm_mAP_s": 0.0, "segm_mAP_m": 0.5398, "segm_mAP_l": 0.7465, "segm_mAP_copypaste": "0.6780 0.8215 0.8215 0.0000 0.5398 0.7465"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00139, "memory": 3075, "data_time": 0.04547, "loss_rpn_cls": 0.00841, "loss_rpn_bbox": 0.00894, "loss_cls": 0.07509, "acc": 97.13281, "loss_bbox": 0.09375, "loss_mask": 0.07975, "loss": 0.26593, "time": 0.28269}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.00169, "memory": 3075, "data_time": 0.00283, "loss_rpn_cls": 0.00412, "loss_rpn_bbox": 0.00835, "loss_cls": 0.06036, "acc": 97.69531, "loss_bbox": 0.09524, "loss_mask": 0.07924, "loss": 0.24732, "time": 0.23482}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.00199, "memory": 3075, "data_time": 0.00291, "loss_rpn_cls": 0.00615, "loss_rpn_bbox": 0.01178, "loss_cls": 0.06421, "acc": 97.5, "loss_bbox": 0.08914, "loss_mask": 0.0823, "loss": 0.25357, "time": 0.23556}
{"mode": "val", "epoch": 2, "iter": 13, "lr": 0.00219, "bbox_mAP": 0.7347, "bbox_mAP_50": 0.8667, "bbox_mAP_75": 0.8447, "bbox_mAP_s": 0.0757, "bbox_mAP_m": 0.6364, "bbox_mAP_l": 0.7899, "bbox_mAP_copypaste": "0.7347 0.8667 0.8447 0.0757 0.6364 0.7899", "segm_mAP": 0.6886, "segm_mAP_50": 0.8447, "segm_mAP_75": 0.8447, "segm_mAP_s": 0.0337, "segm_mAP_m": 0.5963, "segm_mAP_l": 0.7442, "segm_mAP_copypaste": "0.6886 0.8447 0.8447 0.0337 0.5963 0.7442"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.00249, "memory": 3075, "data_time": 0.04486, "loss_rpn_cls": 0.00303, "loss_rpn_bbox": 0.01021, "loss_cls": 0.04253, "acc": 98.41406, "loss_bbox": 0.08278, "loss_mask": 0.06715, "loss": 0.2057, "time": 0.28126}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.00279, "memory": 3075, "data_time": 0.00293, "loss_rpn_cls": 0.00349, "loss_rpn_bbox": 0.01629, "loss_cls": 0.06842, "acc": 97.4375, "loss_bbox": 0.12587, "loss_mask": 0.08713, "loss": 0.30121, "time": 0.23823}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.003, "memory": 3075, "data_time": 0.00289, "loss_rpn_cls": 0.0032, "loss_rpn_bbox": 0.01315, "loss_cls": 0.05124, "acc": 98.14453, "loss_bbox": 0.0961, "loss_mask": 0.07506, "loss": 0.23875, "time": 0.24152}
{"mode": "val", "epoch": 3, "iter": 13, "lr": 0.003, "bbox_mAP": 0.6862, "bbox_mAP_50": 0.8564, "bbox_mAP_75": 0.8134, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.5624, "bbox_mAP_l": 0.7648, "bbox_mAP_copypaste": "0.6862 0.8564 0.8134 0.0000 0.5624 0.7648", "segm_mAP": 0.677, "segm_mAP_50": 0.833, "segm_mAP_75": 0.8141, "segm_mAP_s": 0.0, "segm_mAP_m": 0.5468, "segm_mAP_l": 0.7493, "segm_mAP_copypaste": "0.6770 0.8330 0.8141 0.0000 0.5468 0.7493"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.003, "memory": 3075, "data_time": 0.0454, "loss_rpn_cls": 0.0018, "loss_rpn_bbox": 0.01213, "loss_cls": 0.04896, "acc": 98.02734, "loss_bbox": 0.11631, "loss_mask": 0.07306, "loss": 0.25227, "time": 0.28565}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.003, "memory": 3075, "data_time": 0.00285, "loss_rpn_cls": 0.00158, "loss_rpn_bbox": 0.01005, "loss_cls": 0.03967, "acc": 98.41797, "loss_bbox": 0.07843, "loss_mask": 0.05813, "loss": 0.18785, "time": 0.23677}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 0.003, "memory": 3075, "data_time": 0.00289, "loss_rpn_cls": 0.00176, "loss_rpn_bbox": 0.01542, "loss_cls": 0.03995, "acc": 98.46875, "loss_bbox": 0.07873, "loss_mask": 0.06455, "loss": 0.20041, "time": 0.23996}
{"mode": "val", "epoch": 4, "iter": 13, "lr": 0.003, "bbox_mAP": 0.7208, "bbox_mAP_50": 0.8773, "bbox_mAP_75": 0.8154, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.6544, "bbox_mAP_l": 0.7742, "bbox_mAP_copypaste": "0.7208 0.8773 0.8154 0.0000 0.6544 0.7742", "segm_mAP": 0.6782, "segm_mAP_50": 0.8527, "segm_mAP_75": 0.8173, "segm_mAP_s": 0.0, "segm_mAP_m": 0.5478, "segm_mAP_l": 0.7443, "segm_mAP_copypaste": "0.6782 0.8527 0.8173 0.0000 0.5478 0.7443"}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.003, "memory": 3075, "data_time": 0.04537, "loss_rpn_cls": 0.00198, "loss_rpn_bbox": 0.01424, "loss_cls": 0.03256, "acc": 98.68359, "loss_bbox": 0.07348, "loss_mask": 0.05777, "loss": 0.18003, "time": 0.28272}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.003, "memory": 3075, "data_time": 0.00282, "loss_rpn_cls": 0.00186, "loss_rpn_bbox": 0.01081, "loss_cls": 0.03744, "acc": 98.5, "loss_bbox": 0.07976, "loss_mask": 0.06571, "loss": 0.19558, "time": 0.23588}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 0.003, "memory": 3075, "data_time": 0.00296, "loss_rpn_cls": 0.0011, "loss_rpn_bbox": 0.00971, "loss_cls": 0.03108, "acc": 98.78516, "loss_bbox": 0.06671, "loss_mask": 0.05865, "loss": 0.16725, "time": 0.24164}
{"mode": "val", "epoch": 5, "iter": 13, "lr": 0.003, "bbox_mAP": 0.7483, "bbox_mAP_50": 0.8788, "bbox_mAP_75": 0.8182, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.6455, "bbox_mAP_l": 0.8137, "bbox_mAP_copypaste": "0.7483 0.8788 0.8182 0.0000 0.6455 0.8137", "segm_mAP": 0.6893, "segm_mAP_50": 0.8606, "segm_mAP_75": 0.8258, "segm_mAP_s": 0.0, "segm_mAP_m": 0.6053, "segm_mAP_l": 0.7443, "segm_mAP_copypaste": "0.6893 0.8606 0.8258 0.0000 0.6053 0.7443"}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.003, "memory": 3075, "data_time": 0.04544, "loss_rpn_cls": 0.0009, "loss_rpn_bbox": 0.0086, "loss_cls": 0.03025, "acc": 98.83203, "loss_bbox": 0.06762, "loss_mask": 0.0672, "loss": 0.17457, "time": 0.28362}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.003, "memory": 3075, "data_time": 0.00302, "loss_rpn_cls": 0.00087, "loss_rpn_bbox": 0.00779, "loss_cls": 0.02571, "acc": 98.96484, "loss_bbox": 0.057, "loss_mask": 0.05653, "loss": 0.14791, "time": 0.23609}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 0.003, "memory": 3075, "data_time": 0.00296, "loss_rpn_cls": 0.00086, "loss_rpn_bbox": 0.01215, "loss_cls": 0.03094, "acc": 98.71484, "loss_bbox": 0.06662, "loss_mask": 0.057, "loss": 0.16755, "time": 0.23901}
{"mode": "val", "epoch": 6, "iter": 13, "lr": 0.003, "bbox_mAP": 0.7252, "bbox_mAP_50": 0.8654, "bbox_mAP_75": 0.8281, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.5926, "bbox_mAP_l": 0.8005, "bbox_mAP_copypaste": "0.7252 0.8654 0.8281 0.0000 0.5926 0.8005", "segm_mAP": 0.6956, "segm_mAP_50": 0.8443, "segm_mAP_75": 0.8443, "segm_mAP_s": 0.0, "segm_mAP_m": 0.5586, "segm_mAP_l": 0.7695, "segm_mAP_copypaste": "0.6956 0.8443 0.8443 0.0000 0.5586 0.7695"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.003, "memory": 3075, "data_time": 0.0454, "loss_rpn_cls": 0.00105, "loss_rpn_bbox": 0.00875, "loss_cls": 0.02687, "acc": 98.9375, "loss_bbox": 0.05426, "loss_mask": 0.05181, "loss": 0.14274, "time": 0.28348}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.003, "memory": 3075, "data_time": 0.00286, "loss_rpn_cls": 0.00172, "loss_rpn_bbox": 0.01191, "loss_cls": 0.0351, "acc": 98.46875, "loss_bbox": 0.0628, "loss_mask": 0.05699, "loss": 0.16852, "time": 0.23418}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 0.003, "memory": 3075, "data_time": 0.00281, "loss_rpn_cls": 0.00107, "loss_rpn_bbox": 0.00857, "loss_cls": 0.02448, "acc": 99.03516, "loss_bbox": 0.05506, "loss_mask": 0.05392, "loss": 0.14309, "time": 0.23826}
{"mode": "val", "epoch": 7, "iter": 13, "lr": 0.003, "bbox_mAP": 0.7276, "bbox_mAP_50": 0.8746, "bbox_mAP_75": 0.8365, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.6699, "bbox_mAP_l": 0.79, "bbox_mAP_copypaste": "0.7276 0.8746 0.8365 0.0000 0.6699 0.7900", "segm_mAP": 0.701, "segm_mAP_50": 0.8547, "segm_mAP_75": 0.8547, "segm_mAP_s": 0.0, "segm_mAP_m": 0.6055, "segm_mAP_l": 0.7733, "segm_mAP_copypaste": "0.7010 0.8547 0.8547 0.0000 0.6055 0.7733"}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.003, "memory": 3075, "data_time": 0.0448, "loss_rpn_cls": 0.00084, "loss_rpn_bbox": 0.00681, "loss_cls": 0.02147, "acc": 99.16406, "loss_bbox": 0.05243, "loss_mask": 0.04756, "loss": 0.12912, "time": 0.28108}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.003, "memory": 3075, "data_time": 0.0029, "loss_rpn_cls": 0.00115, "loss_rpn_bbox": 0.00999, "loss_cls": 0.02798, "acc": 98.83203, "loss_bbox": 0.06725, "loss_mask": 0.05806, "loss": 0.16443, "time": 0.23948}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 0.003, "memory": 3075, "data_time": 0.00292, "loss_rpn_cls": 0.00098, "loss_rpn_bbox": 0.00969, "loss_cls": 0.02886, "acc": 98.91406, "loss_bbox": 0.06321, "loss_mask": 0.06003, "loss": 0.16277, "time": 0.2435}
{"mode": "val", "epoch": 8, "iter": 13, "lr": 0.003, "bbox_mAP": 0.7646, "bbox_mAP_50": 0.8698, "bbox_mAP_75": 0.8698, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.6446, "bbox_mAP_l": 0.8443, "bbox_mAP_copypaste": "0.7646 0.8698 0.8698 0.0000 0.6446 0.8443", "segm_mAP": 0.6966, "segm_mAP_50": 0.8462, "segm_mAP_75": 0.8462, "segm_mAP_s": 0.0, "segm_mAP_m": 0.5775, "segm_mAP_l": 0.7639, "segm_mAP_copypaste": "0.6966 0.8462 0.8462 0.0000 0.5775 0.7639"}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.003, "memory": 3075, "data_time": 0.04539, "loss_rpn_cls": 0.0006, "loss_rpn_bbox": 0.00618, "loss_cls": 0.02441, "acc": 99.03906, "loss_bbox": 0.04921, "loss_mask": 0.05188, "loss": 0.13229, "time": 0.28172}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.003, "memory": 3075, "data_time": 0.00285, "loss_rpn_cls": 0.00079, "loss_rpn_bbox": 0.00519, "loss_cls": 0.02377, "acc": 98.97656, "loss_bbox": 0.05115, "loss_mask": 0.05097, "loss": 0.13186, "time": 0.24084}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 0.003, "memory": 3075, "data_time": 0.00289, "loss_rpn_cls": 0.00109, "loss_rpn_bbox": 0.00749, "loss_cls": 0.02336, "acc": 99.05469, "loss_bbox": 0.05809, "loss_mask": 0.05236, "loss": 0.14239, "time": 0.23999}
{"mode": "val", "epoch": 9, "iter": 13, "lr": 0.003, "bbox_mAP": 0.7516, "bbox_mAP_50": 0.8718, "bbox_mAP_75": 0.8315, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.6443, "bbox_mAP_l": 0.8229, "bbox_mAP_copypaste": "0.7516 0.8718 0.8315 0.0000 0.6443 0.8229", "segm_mAP": 0.6962, "segm_mAP_50": 0.8493, "segm_mAP_75": 0.8493, "segm_mAP_s": 0.0, "segm_mAP_m": 0.5603, "segm_mAP_l": 0.7704, "segm_mAP_copypaste": "0.6962 0.8493 0.8493 0.0000 0.5603 0.7704"}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.0003, "memory": 3075, "data_time": 0.04498, "loss_rpn_cls": 0.00128, "loss_rpn_bbox": 0.00925, "loss_cls": 0.02639, "acc": 98.98047, "loss_bbox": 0.05097, "loss_mask": 0.05829, "loss": 0.14617, "time": 0.28494}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.0003, "memory": 3075, "data_time": 0.00295, "loss_rpn_cls": 0.00073, "loss_rpn_bbox": 0.00701, "loss_cls": 0.02391, "acc": 99.05859, "loss_bbox": 0.04115, "loss_mask": 0.05155, "loss": 0.12434, "time": 0.23358}
{"mode": "train", "epoch": 10, "iter": 150, "lr": 0.0003, "memory": 3075, "data_time": 0.00293, "loss_rpn_cls": 0.00097, "loss_rpn_bbox": 0.00675, "loss_cls": 0.02194, "acc": 99.125, "loss_bbox": 0.03854, "loss_mask": 0.05087, "loss": 0.11906, "time": 0.24195}
{"mode": "val", "epoch": 10, "iter": 13, "lr": 0.0003, "bbox_mAP": 0.7681, "bbox_mAP_50": 0.8764, "bbox_mAP_75": 0.8764, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.6067, "bbox_mAP_l": 0.8527, "bbox_mAP_copypaste": "0.7681 0.8764 0.8764 0.0000 0.6067 0.8527", "segm_mAP": 0.6897, "segm_mAP_50": 0.8536, "segm_mAP_75": 0.8252, "segm_mAP_s": 0.0, "segm_mAP_m": 0.5536, "segm_mAP_l": 0.7572, "segm_mAP_copypaste": "0.6897 0.8536 0.8252 0.0000 0.5536 0.7572"}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.0003, "memory": 3075, "data_time": 0.04541, "loss_rpn_cls": 0.00072, "loss_rpn_bbox": 0.00619, "loss_cls": 0.01989, "acc": 99.22656, "loss_bbox": 0.03406, "loss_mask": 0.04882, "loss": 0.10968, "time": 0.27847}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.0003, "memory": 3075, "data_time": 0.00286, "loss_rpn_cls": 0.0009, "loss_rpn_bbox": 0.00539, "loss_cls": 0.02369, "acc": 99.08594, "loss_bbox": 0.0424, "loss_mask": 0.05468, "loss": 0.12706, "time": 0.23992}
{"mode": "train", "epoch": 11, "iter": 150, "lr": 0.0003, "memory": 3075, "data_time": 0.00293, "loss_rpn_cls": 0.00041, "loss_rpn_bbox": 0.00393, "loss_cls": 0.01723, "acc": 99.37891, "loss_bbox": 0.03286, "loss_mask": 0.05214, "loss": 0.10657, "time": 0.23888}
{"mode": "val", "epoch": 11, "iter": 13, "lr": 0.0003, "bbox_mAP": 0.7661, "bbox_mAP_50": 0.8767, "bbox_mAP_75": 0.8537, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.5916, "bbox_mAP_l": 0.8523, "bbox_mAP_copypaste": "0.7661 0.8767 0.8537 0.0000 0.5916 0.8523", "segm_mAP": 0.6876, "segm_mAP_50": 0.8537, "segm_mAP_75": 0.8272, "segm_mAP_s": 0.0, "segm_mAP_m": 0.5494, "segm_mAP_l": 0.7536, "segm_mAP_copypaste": "0.6876 0.8537 0.8272 0.0000 0.5494 0.7536"}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 3e-05, "memory": 3075, "data_time": 0.04473, "loss_rpn_cls": 0.00052, "loss_rpn_bbox": 0.00524, "loss_cls": 0.01885, "acc": 99.34766, "loss_bbox": 0.03568, "loss_mask": 0.05314, "loss": 0.11343, "time": 0.28634}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 3e-05, "memory": 3075, "data_time": 0.00288, "loss_rpn_cls": 0.00066, "loss_rpn_bbox": 0.00452, "loss_cls": 0.01895, "acc": 99.30469, "loss_bbox": 0.03089, "loss_mask": 0.04764, "loss": 0.10266, "time": 0.2347}
{"mode": "train", "epoch": 12, "iter": 150, "lr": 3e-05, "memory": 3075, "data_time": 0.00295, "loss_rpn_cls": 0.00065, "loss_rpn_bbox": 0.00537, "loss_cls": 0.01963, "acc": 99.28125, "loss_bbox": 0.03638, "loss_mask": 0.052, "loss": 0.11403, "time": 0.23843}
{"mode": "val", "epoch": 12, "iter": 13, "lr": 3e-05, "bbox_mAP": 0.7685, "bbox_mAP_50": 0.8749, "bbox_mAP_75": 0.8519, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.6108, "bbox_mAP_l": 0.8507, "bbox_mAP_copypaste": "0.7685 0.8749 0.8519 0.0000 0.6108 0.8507", "segm_mAP": 0.69, "segm_mAP_50": 0.8519, "segm_mAP_75": 0.8252, "segm_mAP_s": 0.0, "segm_mAP_m": 0.5494, "segm_mAP_l": 0.7584, "segm_mAP_copypaste": "0.6900 0.8519 0.8252 0.0000 0.5494 0.7584"}
